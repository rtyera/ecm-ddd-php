<?xml version="1.0" encoding="utf-8"?>
<container xmlns="http://symfony.com/schema/dic/services" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://symfony.com/schema/dic/services https://symfony.com/schema/dic/services/services-1.0.xsd">
  <parameters>
    <parameter key="kernel.project_dir">/mnt/d/Study/vhosts-php/ecommerce/ms/Seller</parameter>
    <parameter key="kernel.environment">dev</parameter>
    <parameter key="kernel.runtime_environment">%env(default:kernel.environment:APP_RUNTIME_ENV)%</parameter>
    <parameter key="kernel.runtime_mode">%env(query_string:default:container.runtime_mode:APP_RUNTIME_MODE)%</parameter>
    <parameter key="kernel.runtime_mode.web">%env(bool:default::key:web:default:kernel.runtime_mode:)%</parameter>
    <parameter key="kernel.runtime_mode.cli">%env(not:default:kernel.runtime_mode.web:)%</parameter>
    <parameter key="kernel.runtime_mode.worker">%env(bool:default::key:worker:default:kernel.runtime_mode:)%</parameter>
    <parameter key="kernel.debug">true</parameter>
    <parameter key="kernel.build_dir">/mnt/d/Study/vhosts-php/ecommerce/ms/Seller/var/cache/dev</parameter>
    <parameter key="kernel.cache_dir">/mnt/d/Study/vhosts-php/ecommerce/ms/Seller/var/cache/dev</parameter>
    <parameter key="kernel.logs_dir">/mnt/d/Study/vhosts-php/ecommerce/ms/Seller/var/log</parameter>
    <parameter key="kernel.bundles" type="collection">
      <parameter key="FrameworkBundle">Symfony\Bundle\FrameworkBundle\FrameworkBundle</parameter>
      <parameter key="MakerBundle">Symfony\Bundle\MakerBundle\MakerBundle</parameter>
    </parameter>
    <parameter key="kernel.bundles_metadata" type="collection">
      <parameter key="FrameworkBundle" type="collection">
        <parameter key="path">/mnt/d/Study/vhosts-php/ecommerce/vendor/symfony/framework-bundle</parameter>
        <parameter key="namespace">Symfony\Bundle\FrameworkBundle</parameter>
      </parameter>
      <parameter key="MakerBundle" type="collection">
        <parameter key="path">/mnt/d/Study/vhosts-php/ecommerce/vendor/symfony/maker-bundle/src</parameter>
        <parameter key="namespace">Symfony\Bundle\MakerBundle</parameter>
      </parameter>
    </parameter>
    <parameter key="kernel.charset">UTF-8</parameter>
    <parameter key="kernel.container_class">TyCode_ms_Seller_SellerKernelDevDebugContainer</parameter>
    <parameter key="container.dumper.inline_class_loader">true</parameter>
    <parameter key="container.dumper.inline_factories">true</parameter>
    <parameter key="event_dispatcher.event_aliases" type="collection">
      <parameter key="Symfony\Component\Console\Event\ConsoleCommandEvent">console.command</parameter>
      <parameter key="Symfony\Component\Console\Event\ConsoleErrorEvent">console.error</parameter>
      <parameter key="Symfony\Component\Console\Event\ConsoleSignalEvent">console.signal</parameter>
      <parameter key="Symfony\Component\Console\Event\ConsoleTerminateEvent">console.terminate</parameter>
      <parameter key="Symfony\Component\HttpKernel\Event\ControllerArgumentsEvent">kernel.controller_arguments</parameter>
      <parameter key="Symfony\Component\HttpKernel\Event\ControllerEvent">kernel.controller</parameter>
      <parameter key="Symfony\Component\HttpKernel\Event\ResponseEvent">kernel.response</parameter>
      <parameter key="Symfony\Component\HttpKernel\Event\FinishRequestEvent">kernel.finish_request</parameter>
      <parameter key="Symfony\Component\HttpKernel\Event\RequestEvent">kernel.request</parameter>
      <parameter key="Symfony\Component\HttpKernel\Event\ViewEvent">kernel.view</parameter>
      <parameter key="Symfony\Component\HttpKernel\Event\ExceptionEvent">kernel.exception</parameter>
      <parameter key="Symfony\Component\HttpKernel\Event\TerminateEvent">kernel.terminate</parameter>
    </parameter>
    <parameter key="fragment.renderer.hinclude.global_template">null</parameter>
    <parameter key="fragment.path">/_fragment</parameter>
    <parameter key="kernel.secret">%env(APP_SECRET)%</parameter>
    <parameter key="kernel.http_method_override">false</parameter>
    <parameter key="kernel.trust_x_sendfile_type_header">false</parameter>
    <parameter key="kernel.trusted_hosts" type="collection"/>
    <parameter key="kernel.default_locale">en</parameter>
    <parameter key="kernel.enabled_locales" type="collection"/>
    <parameter key="kernel.error_controller">error_controller</parameter>
    <parameter key="debug.file_link_format">%env(default::SYMFONY_IDE)%</parameter>
    <parameter key="debug.error_handler.throw_at">-1</parameter>
    <parameter key="debug.container.dump">/mnt/d/Study/vhosts-php/ecommerce/ms/Seller/var/cache/dev/TyCode_ms_Seller_SellerKernelDevDebugContainer.xml</parameter>
    <parameter key="router.request_context.host">localhost</parameter>
    <parameter key="router.request_context.scheme">http</parameter>
    <parameter key="router.request_context.base_url"></parameter>
    <parameter key="router.resource">kernel::loadRoutes</parameter>
    <parameter key="router.cache_dir">/mnt/d/Study/vhosts-php/ecommerce/ms/Seller/var/cache/dev</parameter>
    <parameter key="request_listener.http_port">80</parameter>
    <parameter key="request_listener.https_port">443</parameter>
    <parameter key="cache.prefix.seed">_/mnt/d/Study/vhosts-php/ecommerce/ms/Seller.TyCode_ms_Seller_SellerKernelDevDebugContainer</parameter>
    <parameter key="session.metadata.storage_key">_sf2_meta</parameter>
    <parameter key="session.storage.options" type="collection">
      <parameter key="cache_limiter" type="string">0</parameter>
      <parameter key="cookie_secure">auto</parameter>
      <parameter key="cookie_httponly">true</parameter>
      <parameter key="cookie_samesite">lax</parameter>
      <parameter key="gc_probability">1</parameter>
    </parameter>
    <parameter key="session.save_path">null</parameter>
    <parameter key="session.metadata.update_threshold">0</parameter>
    <parameter key="data_collector.templates" type="collection"/>
    <parameter key="console.command.ids" type="collection"/>
  </parameters>
  <services>
    <service id="service_container" class="Symfony\Component\DependencyInjection\ContainerInterface" public="true" synthetic="true"/>
    <service id="kernel" class="TyCode\ms\Seller\SellerKernel" public="true" synthetic="true" autoconfigure="true">
      <tag name="controller.service_arguments"/>
      <tag name="routing.route_loader"/>
    </service>
    <service id="Doctrine\ORM\EntityManager" class="Doctrine\ORM\EntityManager" public="true">
      <tag name="tycode.database_connection"/>
      <argument type="collection">
        <argument key="driver">%env(SELLER_DATABASE_DRIVER)%</argument>
        <argument key="host">%env(SELLER_DATABASE_HOST)%</argument>
        <argument key="port">%env(SELLER_DATABASE_PORT)%</argument>
        <argument key="dbname">%env(SELLER_DATABASE_NAME)%</argument>
        <argument key="user">%env(SELLER_DATABASE_USER)%</argument>
        <argument key="password">%env(SELLER_DATABASE_PASSWORD)%</argument>
      </argument>
      <argument>%env(APP_ENV)%</argument>
      <factory class="TyCode\Seller\Shared\Infrastructure\Doctrine\SellerEntityManagerFactory" method="create"/>
    </service>
    <service id="TyCode\Seller\Product\Domain\Products" class="TyCode\Seller\Product\Domain\Products" abstract="true">
      <tag name="container.excluded" source="in &quot;config/services.yaml&quot;"/>
    </service>
    <service id="TyCode\Seller\Product\Application\AddReview\AddReview" class="TyCode\Seller\Product\Application\AddReview\AddReview" autowire="true" autoconfigure="true">
      <argument type="service" id="TyCode\Seller\Product\Infrastructure\Persistence\DoctrineProductRepository"/>
      <argument type="service" id="TyCode\Seller\Product\Application\FindById\ProductFinderId"/>
    </service>
    <service id="TyCode\Seller\Product\Application\AddReview\AddReviewCommand" class="TyCode\Seller\Product\Application\AddReview\AddReviewCommand" autowire="true" autoconfigure="true">
      <tag name="container.error" message="Cannot autowire service &quot;TyCode\Seller\Product\Application\AddReview\AddReviewCommand&quot;: argument &quot;$productId&quot; of method &quot;__construct()&quot; is type-hinted &quot;string&quot;, you should configure its value explicitly."/>
    </service>
    <service id="TyCode\Seller\Product\Application\AddReview\AddReviewCommandHandler" class="TyCode\Seller\Product\Application\AddReview\AddReviewCommandHandler" autowire="true" autoconfigure="true">
      <tag name="tycode.command_handler"/>
      <argument type="service" id="TyCode\Seller\Product\Application\AddReview\AddReview"/>
    </service>
    <service id="TyCode\Seller\Product\Application\Create\CreateProductCommand" class="TyCode\Seller\Product\Application\Create\CreateProductCommand" autowire="true" autoconfigure="true">
      <tag name="container.error" message="Cannot autowire service &quot;TyCode\Seller\Product\Application\Create\CreateProductCommand&quot;: argument &quot;$id&quot; of method &quot;__construct()&quot; is type-hinted &quot;string&quot;, you should configure its value explicitly."/>
    </service>
    <service id="TyCode\Seller\Product\Application\Create\CreateProductCommandHandler" class="TyCode\Seller\Product\Application\Create\CreateProductCommandHandler" autowire="true" autoconfigure="true">
      <tag name="tycode.command_handler"/>
      <argument type="service" id="TyCode\Seller\Product\Application\Create\ProductCreator"/>
    </service>
    <service id="TyCode\Seller\Product\Application\Create\ProductCreator" class="TyCode\Seller\Product\Application\Create\ProductCreator" autowire="true" autoconfigure="true">
      <argument type="service" id="TyCode\Seller\Product\Infrastructure\Persistence\DoctrineProductRepository"/>
    </service>
    <service id="TyCode\Seller\Product\Application\Event\CreatedProductEvent" class="TyCode\Seller\Product\Application\Event\CreatedProductEvent" autowire="true" autoconfigure="true">
      <tag name="container.error" message="Cannot autowire service &quot;TyCode\Seller\Product\Application\Event\CreatedProductEvent&quot;: argument &quot;$id&quot; of method &quot;__construct()&quot; is type-hinted &quot;string&quot;, you should configure its value explicitly."/>
    </service>
    <service id="TyCode\Seller\Product\Application\Event\DeliveredReviewEvent" class="TyCode\Seller\Product\Application\Event\DeliveredReviewEvent" autowire="true" autoconfigure="true">
      <tag name="container.error" message="Cannot autowire service &quot;TyCode\Seller\Product\Application\Event\DeliveredReviewEvent&quot;: argument &quot;$id&quot; of method &quot;__construct()&quot; is type-hinted &quot;string&quot;, you should configure its value explicitly."/>
    </service>
    <service id="TyCode\Seller\Product\Application\FindAll\FindProductsQuery" class="TyCode\Seller\Product\Application\FindAll\FindProductsQuery" autowire="true" autoconfigure="true"/>
    <service id="TyCode\Seller\Product\Application\FindAll\FindProductsQueryHandler" class="TyCode\Seller\Product\Application\FindAll\FindProductsQueryHandler" autowire="true" autoconfigure="true">
      <tag name="tycode.query_handler"/>
      <argument type="service" id="TyCode\Seller\Product\Application\FindAll\ProductFinderAll"/>
    </service>
    <service id="TyCode\Seller\Product\Application\FindAll\ProductFinderAll" class="TyCode\Seller\Product\Application\FindAll\ProductFinderAll" autowire="true" autoconfigure="true">
      <argument type="service" id="TyCode\Seller\Product\Infrastructure\Persistence\DoctrineProductRepository"/>
    </service>
    <service id="TyCode\Seller\Product\Application\FindByCriteria\FindProductByCriteriaQuery" class="TyCode\Seller\Product\Application\FindByCriteria\FindProductByCriteriaQuery" autowire="true" autoconfigure="true">
      <argument type="service" id="TyCode\Shared\Domain\Criteria\Criteria"/>
    </service>
    <service id="TyCode\Seller\Product\Application\FindByCriteria\FindProductByCriteriaQueryHandler" class="TyCode\Seller\Product\Application\FindByCriteria\FindProductByCriteriaQueryHandler" autowire="true" autoconfigure="true">
      <tag name="tycode.query_handler"/>
      <argument type="service" id="TyCode\Seller\Product\Application\FindByCriteria\ProductFinderByCriteria"/>
    </service>
    <service id="TyCode\Seller\Product\Application\FindByCriteria\ProductFinderByCriteria" class="TyCode\Seller\Product\Application\FindByCriteria\ProductFinderByCriteria" autowire="true" autoconfigure="true">
      <argument type="service" id="TyCode\Seller\Product\Infrastructure\Persistence\DoctrineProductRepository"/>
    </service>
    <service id="TyCode\Seller\Product\Application\FindById\FindProductQuery" class="TyCode\Seller\Product\Application\FindById\FindProductQuery" autowire="true" autoconfigure="true">
      <tag name="container.error" message="Cannot autowire service &quot;TyCode\Seller\Product\Application\FindById\FindProductQuery&quot;: argument &quot;$id&quot; of method &quot;__construct()&quot; is type-hinted &quot;string&quot;, you should configure its value explicitly."/>
    </service>
    <service id="TyCode\Seller\Product\Application\FindById\FindProductQueryHandler" class="TyCode\Seller\Product\Application\FindById\FindProductQueryHandler" autowire="true" autoconfigure="true">
      <tag name="tycode.query_handler"/>
      <argument type="service" id="TyCode\Seller\Product\Application\FindById\ProductFinderId"/>
    </service>
    <service id="TyCode\Seller\Product\Application\FindById\ProductFinderId" class="TyCode\Seller\Product\Application\FindById\ProductFinderId" autowire="true" autoconfigure="true">
      <argument type="service" id="TyCode\Seller\Product\Infrastructure\Persistence\DoctrineProductRepository"/>
    </service>
    <service id="TyCode\Seller\Product\Application\ProductResponse" class="TyCode\Seller\Product\Application\ProductResponse" autowire="true" autoconfigure="true">
      <argument type="service" id="TyCode\Seller\Product\Domain\Product"/>
    </service>
    <service id="TyCode\Seller\Product\Application\ProductsResponse" class="TyCode\Seller\Product\Application\ProductsResponse" autowire="true" autoconfigure="true">
      <tag name="container.error" message="Cannot autowire service &quot;TyCode\Seller\Product\Application\ProductsResponse&quot;: argument &quot;$products&quot; of method &quot;__construct()&quot; needs an instance of &quot;TyCode\Seller\Product\Domain\Products&quot; but this type has been excluded in &quot;config/services.yaml&quot;."/>
    </service>
    <service id="TyCode\Seller\Product\Application\Subscriber\CreatedProductOn" class="TyCode\Seller\Product\Application\Subscriber\CreatedProductOn" autowire="true" autoconfigure="true">
      <tag name="seller.event_subscriber"/>
      <argument type="service" id="TyCode\Shared\Infrastructure\Bus\Command\SymfonyMessageCommandBus"/>
    </service>
    <service id="TyCode\Seller\Product\Application\Subscriber\DeliveredReviewOn" class="TyCode\Seller\Product\Application\Subscriber\DeliveredReviewOn" autowire="true" autoconfigure="true">
      <tag name="seller.event_subscriber"/>
      <argument type="service" id="TyCode\Shared\Infrastructure\Bus\Command\SymfonyMessageCommandBus"/>
    </service>
    <service id="TyCode\Seller\Product\Domain\Product" class="TyCode\Seller\Product\Domain\Product" autowire="true" autoconfigure="true">
      <argument type="service" id="TyCode\Seller\Product\Domain\ProductId"/>
      <argument type="service" id="TyCode\Seller\Product\Domain\ProductName"/>
      <argument type="service" id="TyCode\Seller\Product\Domain\ProductPrice"/>
      <argument type="service" id="TyCode\Seller\Product\Domain\ProductImages"/>
      <argument type="service" id="TyCode\Seller\Product\Domain\ProductStockQuantity"/>
      <argument type="service" id="TyCode\Seller\Product\Domain\ProductRating"/>
      <argument type="service" id="TyCode\Seller\Product\Domain\ProductReviews"/>
    </service>
    <service id="TyCode\Seller\Product\Domain\ProductDesc" class="TyCode\Seller\Product\Domain\ProductDesc" autowire="true" autoconfigure="true">
      <tag name="container.error" message="Cannot autowire service &quot;TyCode\Seller\Product\Domain\ProductDesc&quot;: argument &quot;$value&quot; of method &quot;TyCode\Shared\Domain\ValueObject\StringValueObject::__construct()&quot; is type-hinted &quot;string&quot;, you should configure its value explicitly."/>
    </service>
    <service id="TyCode\Seller\Product\Domain\ProductId" class="TyCode\Seller\Product\Domain\ProductId" autowire="true" autoconfigure="true">
      <tag name="container.error" message="Cannot autowire service &quot;TyCode\Seller\Product\Domain\ProductId&quot;: argument &quot;$value&quot; of method &quot;TyCode\Shared\Domain\ValueObject\Uuid::__construct()&quot; is type-hinted &quot;string&quot;, you should configure its value explicitly."/>
    </service>
    <service id="TyCode\Seller\Product\Domain\ProductImages" class="TyCode\Seller\Product\Domain\ProductImages" autowire="true" autoconfigure="true">
      <tag name="container.error" message="Cannot autowire service &quot;TyCode\Seller\Product\Domain\ProductImages&quot;: argument &quot;$value&quot; of method &quot;__construct()&quot; is type-hinted &quot;array&quot;, you should configure its value explicitly."/>
    </service>
    <service id="TyCode\Seller\Product\Domain\ProductName" class="TyCode\Seller\Product\Domain\ProductName" autowire="true" autoconfigure="true">
      <tag name="container.error" message="Cannot autowire service &quot;TyCode\Seller\Product\Domain\ProductName&quot;: argument &quot;$value&quot; of method &quot;TyCode\Shared\Domain\ValueObject\StringValueObject::__construct()&quot; is type-hinted &quot;string&quot;, you should configure its value explicitly."/>
    </service>
    <service id="TyCode\Seller\Product\Domain\ProductPrice" class="TyCode\Seller\Product\Domain\ProductPrice" autowire="true" autoconfigure="true">
      <tag name="container.error" message="Cannot autowire service &quot;TyCode\Seller\Product\Domain\ProductPrice&quot;: argument &quot;$value&quot; of method &quot;__construct()&quot; is type-hinted &quot;float&quot;, you should configure its value explicitly."/>
    </service>
    <service id="TyCode\Seller\Product\Domain\ProductRating" class="TyCode\Seller\Product\Domain\ProductRating" autowire="true" autoconfigure="true">
      <tag name="container.error" message="Cannot autowire service &quot;TyCode\Seller\Product\Domain\ProductRating&quot;: argument &quot;$value&quot; of method &quot;__construct()&quot; is type-hinted &quot;int&quot;, you should configure its value explicitly."/>
    </service>
    <service id="TyCode\Seller\Product\Domain\ProductReviews" class="TyCode\Seller\Product\Domain\ProductReviews" autowire="true" autoconfigure="true">
      <tag name="container.error" message="Class &quot;TyCode\Shared\Domain\ValueObject\JsonInterface&quot; not found while loading &quot;TyCode\Seller\Product\Domain\ProductReviews&quot;."/>
    </service>
    <service id="TyCode\Seller\Product\Domain\ProductStockQuantity" class="TyCode\Seller\Product\Domain\ProductStockQuantity" autowire="true" autoconfigure="true">
      <tag name="container.error" message="Cannot autowire service &quot;TyCode\Seller\Product\Domain\ProductStockQuantity&quot;: argument &quot;$value&quot; of method &quot;TyCode\Shared\Domain\ValueObject\IntValueObject::__construct()&quot; is type-hinted &quot;int&quot;, you should configure its value explicitly."/>
    </service>
    <service id="TyCode\Seller\Product\Domain\Review" class="TyCode\Seller\Product\Domain\Review" autowire="true" autoconfigure="true">
      <tag name="container.error" message="Cannot autowire service &quot;TyCode\Seller\Product\Domain\Review&quot;: argument &quot;$message&quot; of method &quot;__construct()&quot; is type-hinted &quot;string&quot;, you should configure its value explicitly."/>
    </service>
    <service id="TyCode\Seller\Product\Domain\Reviews" class="TyCode\Seller\Product\Domain\Reviews" autowire="true" autoconfigure="true">
      <tag name="container.error" message="Cannot autowire service &quot;TyCode\Seller\Product\Domain\Reviews&quot;: argument &quot;$items&quot; of method &quot;TyCode\Shared\Domain\Collection::__construct()&quot; is type-hinted &quot;array&quot;, you should configure its value explicitly."/>
    </service>
    <service id="TyCode\Seller\Product\Infrastructure\Cli\RabbitMq\ConfigureRabbitMqCommand" class="TyCode\Seller\Product\Infrastructure\Cli\RabbitMq\ConfigureRabbitMqCommand" autowire="true" autoconfigure="true">
      <tag name="container.error" message="The autoloader expected class &quot;TyCode\Seller\Product\Infrastructure\Cli\RabbitMq\ConfigureRabbitMqCommand&quot; to be defined in file &quot;/mnt/d/Study/vhosts-php/ecommerce/vendor/composer/../../src/Seller/Product/Infrastructure/Cli/RabbitMq/ConfigureRabbitMqCommand.php&quot;. The file was found but the class was not in it, the class name or namespace probably has a typo."/>
    </service>
    <service id="TyCode\Seller\Product\Infrastructure\Cli\RabbitMq\ConsumeRabbitMqEventsCommand" class="TyCode\Seller\Product\Infrastructure\Cli\RabbitMq\ConsumeRabbitMqEventsCommand" autowire="true" autoconfigure="true">
      <tag name="container.error" message="The autoloader expected class &quot;TyCode\Seller\Product\Infrastructure\Cli\RabbitMq\ConsumeRabbitMqEventsCommand&quot; to be defined in file &quot;/mnt/d/Study/vhosts-php/ecommerce/vendor/composer/../../src/Seller/Product/Infrastructure/Cli/RabbitMq/ConsumeRabbitMqEventsCommand.php&quot;. The file was found but the class was not in it, the class name or namespace probably has a typo."/>
    </service>
    <service id="TyCode\Seller\Product\Infrastructure\Cli\RabbitMq\GenerateSupervisorRabbitMqConsumerFilesCommand" class="TyCode\Seller\Product\Infrastructure\Cli\RabbitMq\GenerateSupervisorRabbitMqConsumerFilesCommand" autowire="true" autoconfigure="true">
      <tag name="container.error" message="The autoloader expected class &quot;TyCode\Seller\Product\Infrastructure\Cli\RabbitMq\GenerateSupervisorRabbitMqConsumerFilesCommand&quot; to be defined in file &quot;/mnt/d/Study/vhosts-php/ecommerce/vendor/composer/../../src/Seller/Product/Infrastructure/Cli/RabbitMq/GenerateSupervisorRabbitMqConsumerFilesCommand.php&quot;. The file was found but the class was not in it, the class name or namespace probably has a typo."/>
    </service>
    <service id="TyCode\Seller\Product\Infrastructure\Persistence\Doctrine\ProductIdType" class="TyCode\Seller\Product\Infrastructure\Persistence\Doctrine\ProductIdType" autowire="true" autoconfigure="true">
      <tag name="container.error" message="Class &quot;TyCode\Shared\Infrastructure\Persistence\Doctrine\UuidType&quot; not found while loading &quot;TyCode\Seller\Product\Infrastructure\Persistence\Doctrine\ProductIdType&quot;."/>
    </service>
    <service id="TyCode\Seller\Product\Infrastructure\Persistence\Doctrine\ProductReviewsType" class="TyCode\Seller\Product\Infrastructure\Persistence\Doctrine\ProductReviewsType" autowire="true" autoconfigure="true">
      <tag name="container.error" message="Class &quot;TyCode\Shared\Infrastructure\Persistence\Doctrine\JsonCustomType&quot; not found while loading &quot;TyCode\Seller\Product\Infrastructure\Persistence\Doctrine\ProductReviewsType&quot;."/>
    </service>
    <service id="TyCode\Seller\Product\Infrastructure\Persistence\DoctrineProductRepository" class="TyCode\Seller\Product\Infrastructure\Persistence\DoctrineProductRepository" autowire="true" autoconfigure="true">
      <argument type="service" id="Doctrine\ORM\EntityManager"/>
    </service>
    <service id="TyCode\Seller\Product\Infrastructure\Web\GetProduct" class="TyCode\Seller\Product\Infrastructure\Web\GetProduct" public="true" autowire="true" autoconfigure="true">
      <tag name="controller.service_arguments"/>
    </service>
    <service id="TyCode\Seller\Product\Infrastructure\Web\GetProductByCriteria" class="TyCode\Seller\Product\Infrastructure\Web\GetProductByCriteria" public="true" autowire="true" autoconfigure="true">
      <tag name="controller.service_arguments"/>
    </service>
    <service id="TyCode\Seller\Product\Infrastructure\Web\GetProducts" class="TyCode\Seller\Product\Infrastructure\Web\GetProducts" public="true" autowire="true" autoconfigure="true">
      <tag name="controller.service_arguments"/>
    </service>
    <service id="TyCode\Seller\Product\Infrastructure\Web\HealthCheckGetController" class="TyCode\Seller\Product\Infrastructure\Web\HealthCheckGetController" public="true" autowire="true" autoconfigure="true">
      <tag name="controller.service_arguments"/>
    </service>
    <service id="TyCode\Seller\Product\Infrastructure\Web\ProductResponseMapper" class="TyCode\Seller\Product\Infrastructure\Web\ProductResponseMapper" public="true" autowire="true" autoconfigure="true">
      <tag name="controller.service_arguments"/>
    </service>
    <service id="TyCode\Seller\Review\Application\Create\CreateReviewCommand" class="TyCode\Seller\Review\Application\Create\CreateReviewCommand" autowire="true" autoconfigure="true">
      <tag name="container.error" message="Cannot autowire service &quot;TyCode\Seller\Review\Application\Create\CreateReviewCommand&quot;: argument &quot;$id&quot; of method &quot;__construct()&quot; is type-hinted &quot;string&quot;, you should configure its value explicitly."/>
    </service>
    <service id="TyCode\Seller\Review\Application\Create\CreateReviewCommandHandler" class="TyCode\Seller\Review\Application\Create\CreateReviewCommandHandler" autowire="true" autoconfigure="true">
      <tag name="tycode.command_handler"/>
      <argument type="service" id="TyCode\Shared\Infrastructure\Bus\Event\RabbitMq\RabbitMqEventBus"/>
    </service>
    <service id="TyCode\Seller\Review\Application\Event\CreateReviewEvent" class="TyCode\Seller\Review\Application\Event\CreateReviewEvent" autowire="true" autoconfigure="true">
      <tag name="container.error" message="Cannot autowire service &quot;TyCode\Seller\Review\Application\Event\CreateReviewEvent&quot;: argument &quot;$id&quot; of method &quot;__construct()&quot; is type-hinted &quot;string&quot;, you should configure its value explicitly."/>
    </service>
    <service id="TyCode\Seller\Review\Domain\Review" class="TyCode\Seller\Review\Domain\Review" autowire="true" autoconfigure="true">
      <argument type="service" id="TyCode\Seller\Review\Domain\ReviewId"/>
      <argument type="service" id="TyCode\Seller\Product\Domain\ProductId"/>
      <argument type="service" id="TyCode\Seller\Review\Domain\ReviewAuthor"/>
      <argument type="service" id="TyCode\Seller\Review\Domain\ReviewMessage"/>
      <argument type="service" id="TyCode\Seller\Review\Domain\ReviewCreateOn"/>
    </service>
    <service id="TyCode\Seller\Review\Domain\ReviewAuthor" class="TyCode\Seller\Review\Domain\ReviewAuthor" autowire="true" autoconfigure="true">
      <tag name="container.error" message="Cannot autowire service &quot;TyCode\Seller\Review\Domain\ReviewAuthor&quot;: argument &quot;$value&quot; of method &quot;TyCode\Shared\Domain\ValueObject\StringValueObject::__construct()&quot; is type-hinted &quot;string&quot;, you should configure its value explicitly."/>
    </service>
    <service id="TyCode\Seller\Review\Domain\ReviewCreateOn" class="TyCode\Seller\Review\Domain\ReviewCreateOn" autowire="true" autoconfigure="true">
      <tag name="container.error" message="Cannot autowire service &quot;TyCode\Seller\Review\Domain\ReviewCreateOn&quot;: argument &quot;$value&quot; of method &quot;TyCode\Shared\Domain\ValueObject\DateValueObject::__construct()&quot; references class &quot;DateTime&quot; but no such service exists."/>
    </service>
    <service id="TyCode\Seller\Review\Domain\ReviewId" class="TyCode\Seller\Review\Domain\ReviewId" autowire="true" autoconfigure="true">
      <tag name="container.error" message="Cannot autowire service &quot;TyCode\Seller\Review\Domain\ReviewId&quot;: argument &quot;$value&quot; of method &quot;TyCode\Shared\Domain\ValueObject\Uuid::__construct()&quot; is type-hinted &quot;string&quot;, you should configure its value explicitly."/>
    </service>
    <service id="TyCode\Seller\Review\Domain\ReviewMessage" class="TyCode\Seller\Review\Domain\ReviewMessage" autowire="true" autoconfigure="true">
      <tag name="container.error" message="Cannot autowire service &quot;TyCode\Seller\Review\Domain\ReviewMessage&quot;: argument &quot;$value&quot; of method &quot;TyCode\Shared\Domain\ValueObject\StringValueObject::__construct()&quot; is type-hinted &quot;string&quot;, you should configure its value explicitly."/>
    </service>
    <service id="TyCode\Seller\Review\Infrastructure\Cli\RabbitMq\ConfigureRabbitMqCommand" class="TyCode\Seller\Review\Infrastructure\Cli\RabbitMq\ConfigureRabbitMqCommand" autowire="true" autoconfigure="true">
      <tag name="console.command"/>
      <tag name="container.no_preload"/>
      <argument type="service" id="TyCode\Shared\Infrastructure\Bus\Event\RabbitMq\RabbitMqConfigurer"/>
      <argument>%env(RABBITMQ_EXCHANGE)%</argument>
      <argument type="tagged_iterator" tag="seller.event_subscriber"/>
      <call method="setName">
        <argument>ecm:rabbitmq:configure</argument>
      </call>
    </service>
    <service id="TyCode\Seller\Review\Infrastructure\Cli\RabbitMq\ConsumeRabbitMqEventsCommand" class="TyCode\Seller\Review\Infrastructure\Cli\RabbitMq\ConsumeRabbitMqEventsCommand" autowire="true" autoconfigure="true">
      <tag name="console.command"/>
      <tag name="container.no_preload"/>
      <argument type="service" id="TyCode\Shared\Infrastructure\Bus\Event\RabbitMq\RabbitMqEventsConsumer"/>
      <argument type="service" id="TyCode\Shared\Infrastructure\Bus\Event\EventSubscriberLocator"/>
      <call method="setName">
        <argument>ecm:rabbitmq:events:consume</argument>
      </call>
    </service>
    <service id="TyCode\Seller\Review\Infrastructure\Cli\RabbitMq\GenerateSupervisorRabbitMqConsumerFilesCommand" class="TyCode\Seller\Review\Infrastructure\Cli\RabbitMq\GenerateSupervisorRabbitMqConsumerFilesCommand" autowire="true" autoconfigure="true">
      <tag name="console.command"/>
      <tag name="container.no_preload"/>
      <argument type="service" id="TyCode\Shared\Infrastructure\Bus\Event\EventSubscriberLocator"/>
      <call method="setName">
        <argument>ecm:rabbitmq:events:generate-supervisor-files</argument>
      </call>
    </service>
    <service id="TyCode\Seller\Review\Infrastructure\Web\HealthCheckGetController" class="TyCode\Seller\Review\Infrastructure\Web\HealthCheckGetController" public="true" autowire="true" autoconfigure="true">
      <tag name="controller.service_arguments"/>
    </service>
    <service id="TyCode\Seller\Review\Infrastructure\Web\PostReviewCreate" class="TyCode\Seller\Review\Infrastructure\Web\PostReviewCreate" public="true" autowire="true" autoconfigure="true">
      <tag name="controller.service_arguments"/>
    </service>
    <service id="TyCode\Seller\Shared\Infrastructure\Doctrine\DbalTypesSearcher" class="TyCode\Seller\Shared\Infrastructure\Doctrine\DbalTypesSearcher" autowire="true" autoconfigure="true"/>
    <service id="TyCode\Seller\Shared\Infrastructure\Doctrine\DoctrinePrefixesSearcher" class="TyCode\Seller\Shared\Infrastructure\Doctrine\DoctrinePrefixesSearcher" autowire="true" autoconfigure="true"/>
    <service id="TyCode\Seller\Shared\Infrastructure\Doctrine\SellerEntityManagerFactory" class="TyCode\Seller\Shared\Infrastructure\Doctrine\SellerEntityManagerFactory" autowire="true" autoconfigure="true"/>
    <service id="TyCode\Shared\Domain\Assert" class="TyCode\Shared\Domain\Assert" autowire="true" autoconfigure="true"/>
    <service id="TyCode\Shared\Domain\Criteria\Criteria" class="TyCode\Shared\Domain\Criteria\Criteria" autowire="true" autoconfigure="true">
      <tag name="container.error" message="Cannot autowire service &quot;TyCode\Shared\Domain\Criteria\Criteria&quot;: argument &quot;$offset&quot; of method &quot;__construct()&quot; is type-hinted &quot;int&quot;, you should configure its value explicitly."/>
    </service>
    <service id="TyCode\Shared\Domain\Criteria\Filter" class="TyCode\Shared\Domain\Criteria\Filter" autowire="true" autoconfigure="true">
      <argument type="service" id="TyCode\Shared\Domain\Criteria\FilterField"/>
      <argument type="service" id="TyCode\Shared\Domain\Criteria\FilterOperator"/>
      <argument type="service" id="TyCode\Shared\Domain\Criteria\FilterValue"/>
    </service>
    <service id="TyCode\Shared\Domain\Criteria\FilterField" class="TyCode\Shared\Domain\Criteria\FilterField" autowire="true" autoconfigure="true">
      <tag name="container.error" message="Cannot autowire service &quot;TyCode\Shared\Domain\Criteria\FilterField&quot;: argument &quot;$value&quot; of method &quot;TyCode\Shared\Domain\ValueObject\StringValueObject::__construct()&quot; is type-hinted &quot;string&quot;, you should configure its value explicitly."/>
    </service>
    <service id="TyCode\Shared\Domain\Criteria\FilterOperator" class="TyCode\Shared\Domain\Criteria\FilterOperator" autowire="true" autoconfigure="true">
      <tag name="container.error" message="Cannot autowire service &quot;TyCode\Shared\Domain\Criteria\FilterOperator&quot;: argument &quot;$value&quot; of method &quot;TyCode\Shared\Domain\ValueObject\Enum::__construct()&quot; has no type-hint, you should configure its value explicitly."/>
    </service>
    <service id="TyCode\Shared\Domain\Criteria\FilterValue" class="TyCode\Shared\Domain\Criteria\FilterValue" autowire="true" autoconfigure="true">
      <tag name="container.error" message="Cannot autowire service &quot;TyCode\Shared\Domain\Criteria\FilterValue&quot;: argument &quot;$value&quot; of method &quot;TyCode\Shared\Domain\ValueObject\StringValueObject::__construct()&quot; is type-hinted &quot;string&quot;, you should configure its value explicitly."/>
    </service>
    <service id="TyCode\Shared\Domain\Criteria\Filters" class="TyCode\Shared\Domain\Criteria\Filters" autowire="true" autoconfigure="true">
      <tag name="container.error" message="Cannot autowire service &quot;TyCode\Shared\Domain\Criteria\Filters&quot;: argument &quot;$items&quot; of method &quot;TyCode\Shared\Domain\Collection::__construct()&quot; is type-hinted &quot;array&quot;, you should configure its value explicitly."/>
    </service>
    <service id="TyCode\Shared\Domain\Criteria\Order" class="TyCode\Shared\Domain\Criteria\Order" autowire="true" autoconfigure="true">
      <argument type="service" id="TyCode\Shared\Domain\Criteria\OrderBy"/>
      <argument type="service" id="TyCode\Shared\Domain\Criteria\OrderType"/>
    </service>
    <service id="TyCode\Shared\Domain\Criteria\OrderBy" class="TyCode\Shared\Domain\Criteria\OrderBy" autowire="true" autoconfigure="true">
      <tag name="container.error" message="Cannot autowire service &quot;TyCode\Shared\Domain\Criteria\OrderBy&quot;: argument &quot;$value&quot; of method &quot;TyCode\Shared\Domain\ValueObject\StringValueObject::__construct()&quot; is type-hinted &quot;string&quot;, you should configure its value explicitly."/>
    </service>
    <service id="TyCode\Shared\Domain\Criteria\OrderType" class="TyCode\Shared\Domain\Criteria\OrderType" autowire="true" autoconfigure="true">
      <tag name="container.error" message="Cannot autowire service &quot;TyCode\Shared\Domain\Criteria\OrderType&quot;: argument &quot;$value&quot; of method &quot;TyCode\Shared\Domain\ValueObject\Enum::__construct()&quot; has no type-hint, you should configure its value explicitly."/>
    </service>
    <service id="TyCode\Shared\Domain\Utils" class="TyCode\Shared\Domain\Utils" autowire="true" autoconfigure="true"/>
    <service id="TyCode\Shared\Domain\ValueObject\JsonTypeInterface" class="TyCode\Shared\Domain\ValueObject\JsonTypeInterface" autowire="true" autoconfigure="true">
      <tag name="container.error" message="The autoloader expected class &quot;TyCode\Shared\Domain\ValueObject\JsonTypeInterface&quot; to be defined in file &quot;/mnt/d/Study/vhosts-php/ecommerce/vendor/composer/../../src/Shared/Domain/ValueObject/JsonTypeInterface.php&quot;. The file was found but the class was not in it, the class name or namespace probably has a typo."/>
    </service>
    <service id="TyCode\Shared\Domain\ValueObject\Uuid" class="TyCode\Shared\Domain\ValueObject\Uuid" autowire="true" autoconfigure="true">
      <tag name="container.error" message="Cannot autowire service &quot;TyCode\Shared\Domain\ValueObject\Uuid&quot;: argument &quot;$value&quot; of method &quot;__construct()&quot; is type-hinted &quot;string&quot;, you should configure its value explicitly."/>
    </service>
    <service id="TyCode\Shared\Infrsatructure\Bus\CallableFirstParameterExtractor" class="TyCode\Shared\Infrsatructure\Bus\CallableFirstParameterExtractor" autowire="true" autoconfigure="true">
      <tag name="container.error" message="The autoloader expected class &quot;TyCode\Shared\Infrsatructure\Bus\CallableFirstParameterExtractor&quot; to be defined in file &quot;/mnt/d/Study/vhosts-php/ecommerce/vendor/composer/../../src/Shared/Infrsatructure/Bus/CallableFirstParameterExtractor.php&quot;. The file was found but the class was not in it, the class name or namespace probably has a typo."/>
    </service>
    <service id="TyCode\Shared\Infrsatructure\Bus\Command\CommandNotRegisteredError" class="TyCode\Shared\Infrsatructure\Bus\Command\CommandNotRegisteredError" autowire="true" autoconfigure="true">
      <tag name="container.error" message="The autoloader expected class &quot;TyCode\Shared\Infrsatructure\Bus\Command\CommandNotRegisteredError&quot; to be defined in file &quot;/mnt/d/Study/vhosts-php/ecommerce/vendor/composer/../../src/Shared/Infrsatructure/Bus/Command/CommandNotRegisteredError.php&quot;. The file was found but the class was not in it, the class name or namespace probably has a typo."/>
    </service>
    <service id="TyCode\Shared\Infrsatructure\Bus\Command\SymfonyMessageCommandBus" class="TyCode\Shared\Infrsatructure\Bus\Command\SymfonyMessageCommandBus" autowire="true" autoconfigure="true">
      <tag name="container.error" message="The autoloader expected class &quot;TyCode\Shared\Infrsatructure\Bus\Command\SymfonyMessageCommandBus&quot; to be defined in file &quot;/mnt/d/Study/vhosts-php/ecommerce/vendor/composer/../../src/Shared/Infrsatructure/Bus/Command/SymfonyMessageCommandBus.php&quot;. The file was found but the class was not in it, the class name or namespace probably has a typo."/>
    </service>
    <service id="TyCode\Shared\Infrsatructure\Bus\Event\EventJsonDeserializer" class="TyCode\Shared\Infrsatructure\Bus\Event\EventJsonDeserializer" autowire="true" autoconfigure="true">
      <tag name="container.error" message="The autoloader expected class &quot;TyCode\Shared\Infrsatructure\Bus\Event\EventJsonDeserializer&quot; to be defined in file &quot;/mnt/d/Study/vhosts-php/ecommerce/vendor/composer/../../src/Shared/Infrsatructure/Bus/Event/EventJsonDeserializer.php&quot;. The file was found but the class was not in it, the class name or namespace probably has a typo."/>
    </service>
    <service id="TyCode\Shared\Infrsatructure\Bus\Event\EventJsonSerializer" class="TyCode\Shared\Infrsatructure\Bus\Event\EventJsonSerializer" autowire="true" autoconfigure="true">
      <tag name="container.error" message="The autoloader expected class &quot;TyCode\Shared\Infrsatructure\Bus\Event\EventJsonSerializer&quot; to be defined in file &quot;/mnt/d/Study/vhosts-php/ecommerce/vendor/composer/../../src/Shared/Infrsatructure/Bus/Event/EventJsonSerializer.php&quot;. The file was found but the class was not in it, the class name or namespace probably has a typo."/>
    </service>
    <service id="TyCode\Shared\Infrsatructure\Bus\Event\EventMapping" class="TyCode\Shared\Infrsatructure\Bus\Event\EventMapping" autowire="true" autoconfigure="true">
      <tag name="container.error" message="The autoloader expected class &quot;TyCode\Shared\Infrsatructure\Bus\Event\EventMapping&quot; to be defined in file &quot;/mnt/d/Study/vhosts-php/ecommerce/vendor/composer/../../src/Shared/Infrsatructure/Bus/Event/EventMapping.php&quot;. The file was found but the class was not in it, the class name or namespace probably has a typo."/>
    </service>
    <service id="TyCode\Shared\Infrsatructure\Bus\Event\EventSubscriberLocator" class="TyCode\Shared\Infrsatructure\Bus\Event\EventSubscriberLocator" autowire="true" autoconfigure="true">
      <tag name="container.error" message="The autoloader expected class &quot;TyCode\Shared\Infrsatructure\Bus\Event\EventSubscriberLocator&quot; to be defined in file &quot;/mnt/d/Study/vhosts-php/ecommerce/vendor/composer/../../src/Shared/Infrsatructure/Bus/Event/EventSubscriberLocator.php&quot;. The file was found but the class was not in it, the class name or namespace probably has a typo."/>
    </service>
    <service id="TyCode\Shared\Infrsatructure\Bus\Event\RabbitMq\RabbitMqConfigurer" class="TyCode\Shared\Infrsatructure\Bus\Event\RabbitMq\RabbitMqConfigurer" autowire="true" autoconfigure="true">
      <tag name="container.error" message="The autoloader expected class &quot;TyCode\Shared\Infrsatructure\Bus\Event\RabbitMq\RabbitMqConfigurer&quot; to be defined in file &quot;/mnt/d/Study/vhosts-php/ecommerce/vendor/composer/../../src/Shared/Infrsatructure/Bus/Event/RabbitMq/RabbitMqConfigurer.php&quot;. The file was found but the class was not in it, the class name or namespace probably has a typo."/>
    </service>
    <service id="TyCode\Shared\Infrsatructure\Bus\Event\RabbitMq\RabbitMqConnection" class="TyCode\Shared\Infrsatructure\Bus\Event\RabbitMq\RabbitMqConnection" autowire="true" autoconfigure="true">
      <tag name="container.error" message="The autoloader expected class &quot;TyCode\Shared\Infrsatructure\Bus\Event\RabbitMq\RabbitMqConnection&quot; to be defined in file &quot;/mnt/d/Study/vhosts-php/ecommerce/vendor/composer/../../src/Shared/Infrsatructure/Bus/Event/RabbitMq/RabbitMqConnection.php&quot;. The file was found but the class was not in it, the class name or namespace probably has a typo."/>
    </service>
    <service id="TyCode\Shared\Infrsatructure\Bus\Event\RabbitMq\RabbitMqEventBus" class="TyCode\Shared\Infrsatructure\Bus\Event\RabbitMq\RabbitMqEventBus" autowire="true" autoconfigure="true">
      <tag name="container.error" message="The autoloader expected class &quot;TyCode\Shared\Infrsatructure\Bus\Event\RabbitMq\RabbitMqEventBus&quot; to be defined in file &quot;/mnt/d/Study/vhosts-php/ecommerce/vendor/composer/../../src/Shared/Infrsatructure/Bus/Event/RabbitMq/RabbitMqEventBus.php&quot;. The file was found but the class was not in it, the class name or namespace probably has a typo."/>
    </service>
    <service id="TyCode\Shared\Infrsatructure\Bus\Event\RabbitMq\RabbitMqEventsConsumer" class="TyCode\Shared\Infrsatructure\Bus\Event\RabbitMq\RabbitMqEventsConsumer" autowire="true" autoconfigure="true">
      <tag name="container.error" message="The autoloader expected class &quot;TyCode\Shared\Infrsatructure\Bus\Event\RabbitMq\RabbitMqEventsConsumer&quot; to be defined in file &quot;/mnt/d/Study/vhosts-php/ecommerce/vendor/composer/../../src/Shared/Infrsatructure/Bus/Event/RabbitMq/RabbitMqEventsConsumer.php&quot;. The file was found but the class was not in it, the class name or namespace probably has a typo."/>
    </service>
    <service id="TyCode\Shared\Infrsatructure\Bus\Event\RabbitMq\RabbitMqExchangeNameFormatter" class="TyCode\Shared\Infrsatructure\Bus\Event\RabbitMq\RabbitMqExchangeNameFormatter" autowire="true" autoconfigure="true">
      <tag name="container.error" message="The autoloader expected class &quot;TyCode\Shared\Infrsatructure\Bus\Event\RabbitMq\RabbitMqExchangeNameFormatter&quot; to be defined in file &quot;/mnt/d/Study/vhosts-php/ecommerce/vendor/composer/../../src/Shared/Infrsatructure/Bus/Event/RabbitMq/RabbitMqExchangeNameFormatter.php&quot;. The file was found but the class was not in it, the class name or namespace probably has a typo."/>
    </service>
    <service id="TyCode\Shared\Infrsatructure\Bus\Event\RabbitMq\RabbitMqQueueNameFormatter" class="TyCode\Shared\Infrsatructure\Bus\Event\RabbitMq\RabbitMqQueueNameFormatter" autowire="true" autoconfigure="true">
      <tag name="container.error" message="The autoloader expected class &quot;TyCode\Shared\Infrsatructure\Bus\Event\RabbitMq\RabbitMqQueueNameFormatter&quot; to be defined in file &quot;/mnt/d/Study/vhosts-php/ecommerce/vendor/composer/../../src/Shared/Infrsatructure/Bus/Event/RabbitMq/RabbitMqQueueNameFormatter.php&quot;. The file was found but the class was not in it, the class name or namespace probably has a typo."/>
    </service>
    <service id="TyCode\Shared\Infrsatructure\Bus\Query\QueryNotRegisteredError" class="TyCode\Shared\Infrsatructure\Bus\Query\QueryNotRegisteredError" autowire="true" autoconfigure="true">
      <tag name="container.error" message="The autoloader expected class &quot;TyCode\Shared\Infrsatructure\Bus\Query\QueryNotRegisteredError&quot; to be defined in file &quot;/mnt/d/Study/vhosts-php/ecommerce/vendor/composer/../../src/Shared/Infrsatructure/Bus/Query/QueryNotRegisteredError.php&quot;. The file was found but the class was not in it, the class name or namespace probably has a typo."/>
    </service>
    <service id="TyCode\Shared\Infrsatructure\Bus\Query\SymfonyMessageQueryBus" class="TyCode\Shared\Infrsatructure\Bus\Query\SymfonyMessageQueryBus" autowire="true" autoconfigure="true">
      <tag name="container.error" message="The autoloader expected class &quot;TyCode\Shared\Infrsatructure\Bus\Query\SymfonyMessageQueryBus&quot; to be defined in file &quot;/mnt/d/Study/vhosts-php/ecommerce/vendor/composer/../../src/Shared/Infrsatructure/Bus/Query/SymfonyMessageQueryBus.php&quot;. The file was found but the class was not in it, the class name or namespace probably has a typo."/>
    </service>
    <service id="TyCode\Shared\Infrsatructure\Doctrine\DatabaseConnections" class="TyCode\Shared\Infrsatructure\Doctrine\DatabaseConnections" autowire="true" autoconfigure="true">
      <tag name="container.error" message="The autoloader expected class &quot;TyCode\Shared\Infrsatructure\Doctrine\DatabaseConnections&quot; to be defined in file &quot;/mnt/d/Study/vhosts-php/ecommerce/vendor/composer/../../src/Shared/Infrsatructure/Doctrine/DatabaseConnections.php&quot;. The file was found but the class was not in it, the class name or namespace probably has a typo."/>
    </service>
    <service id="TyCode\Shared\Infrsatructure\Doctrine\Dbal\DbalCustomTypesRegistrar" class="TyCode\Shared\Infrsatructure\Doctrine\Dbal\DbalCustomTypesRegistrar" autowire="true" autoconfigure="true">
      <tag name="container.error" message="The autoloader expected class &quot;TyCode\Shared\Infrsatructure\Doctrine\Dbal\DbalCustomTypesRegistrar&quot; to be defined in file &quot;/mnt/d/Study/vhosts-php/ecommerce/vendor/composer/../../src/Shared/Infrsatructure/Doctrine/Dbal/DbalCustomTypesRegistrar.php&quot;. The file was found but the class was not in it, the class name or namespace probably has a typo."/>
    </service>
    <service id="TyCode\Shared\Infrsatructure\Doctrine\Dbal\DoctrineCustomType" class="TyCode\Shared\Infrsatructure\Doctrine\Dbal\DoctrineCustomType" autowire="true" autoconfigure="true">
      <tag name="container.error" message="The autoloader expected class &quot;TyCode\Shared\Infrsatructure\Doctrine\Dbal\DoctrineCustomType&quot; to be defined in file &quot;/mnt/d/Study/vhosts-php/ecommerce/vendor/composer/../../src/Shared/Infrsatructure/Doctrine/Dbal/DoctrineCustomType.php&quot;. The file was found but the class was not in it, the class name or namespace probably has a typo."/>
    </service>
    <service id="TyCode\Shared\Infrsatructure\Doctrine\DoctrineEntityManagerFactory" class="TyCode\Shared\Infrsatructure\Doctrine\DoctrineEntityManagerFactory" autowire="true" autoconfigure="true">
      <tag name="container.error" message="The autoloader expected class &quot;TyCode\Shared\Infrsatructure\Doctrine\DoctrineEntityManagerFactory&quot; to be defined in file &quot;/mnt/d/Study/vhosts-php/ecommerce/vendor/composer/../../src/Shared/Infrsatructure/Doctrine/DoctrineEntityManagerFactory.php&quot;. The file was found but the class was not in it, the class name or namespace probably has a typo."/>
    </service>
    <service id="TyCode\Shared\Infrsatructure\Doctrine\DoctrineTools" class="TyCode\Shared\Infrsatructure\Doctrine\DoctrineTools" autowire="true" autoconfigure="true">
      <tag name="container.error" message="The autoloader expected class &quot;TyCode\Shared\Infrsatructure\Doctrine\DoctrineTools&quot; to be defined in file &quot;/mnt/d/Study/vhosts-php/ecommerce/vendor/composer/../../src/Shared/Infrsatructure/Doctrine/DoctrineTools.php&quot;. The file was found but the class was not in it, the class name or namespace probably has a typo."/>
    </service>
    <service id="TyCode\Shared\Infrsatructure\HttpQuery\QueryCriteriaConverter" class="TyCode\Shared\Infrsatructure\HttpQuery\QueryCriteriaConverter" autowire="true" autoconfigure="true">
      <tag name="container.error" message="The autoloader expected class &quot;TyCode\Shared\Infrsatructure\HttpQuery\QueryCriteriaConverter&quot; to be defined in file &quot;/mnt/d/Study/vhosts-php/ecommerce/vendor/composer/../../src/Shared/Infrsatructure/HttpQuery/QueryCriteriaConverter.php&quot;. The file was found but the class was not in it, the class name or namespace probably has a typo."/>
    </service>
    <service id="TyCode\Shared\Infrsatructure\Persistence\Doctrine\DoctrineCriteriaConverter" class="TyCode\Shared\Infrsatructure\Persistence\Doctrine\DoctrineCriteriaConverter" autowire="true" autoconfigure="true">
      <tag name="container.error" message="The autoloader expected class &quot;TyCode\Shared\Infrsatructure\Persistence\Doctrine\DoctrineCriteriaConverter&quot; to be defined in file &quot;/mnt/d/Study/vhosts-php/ecommerce/vendor/composer/../../src/Shared/Infrsatructure/Persistence/Doctrine/DoctrineCriteriaConverter.php&quot;. The file was found but the class was not in it, the class name or namespace probably has a typo."/>
    </service>
    <service id="TyCode\Shared\Infrsatructure\Persistence\Doctrine\DoctrineRepository" class="TyCode\Shared\Infrsatructure\Persistence\Doctrine\DoctrineRepository" autowire="true" autoconfigure="true">
      <tag name="container.error" message="The autoloader expected class &quot;TyCode\Shared\Infrsatructure\Persistence\Doctrine\DoctrineRepository&quot; to be defined in file &quot;/mnt/d/Study/vhosts-php/ecommerce/vendor/composer/../../src/Shared/Infrsatructure/Persistence/Doctrine/DoctrineRepository.php&quot;. The file was found but the class was not in it, the class name or namespace probably has a typo."/>
    </service>
    <service id="TyCode\Shared\Infrsatructure\Persistence\Doctrine\JsonCustomType" class="TyCode\Shared\Infrsatructure\Persistence\Doctrine\JsonCustomType" autowire="true" autoconfigure="true">
      <tag name="container.error" message="The autoloader expected class &quot;TyCode\Shared\Infrsatructure\Persistence\Doctrine\JsonCustomType&quot; to be defined in file &quot;/mnt/d/Study/vhosts-php/ecommerce/vendor/composer/../../src/Shared/Infrsatructure/Persistence/Doctrine/JsonCustomType.php&quot;. The file was found but the class was not in it, the class name or namespace probably has a typo."/>
    </service>
    <service id="TyCode\Shared\Infrsatructure\Persistence\Doctrine\UuidType" class="TyCode\Shared\Infrsatructure\Persistence\Doctrine\UuidType" autowire="true" autoconfigure="true">
      <tag name="container.error" message="The autoloader expected class &quot;TyCode\Shared\Infrsatructure\Persistence\Doctrine\UuidType&quot; to be defined in file &quot;/mnt/d/Study/vhosts-php/ecommerce/vendor/composer/../../src/Shared/Infrsatructure/Persistence/Doctrine/UuidType.php&quot;. The file was found but the class was not in it, the class name or namespace probably has a typo."/>
    </service>
    <service id="TyCode\Shared\Infrastructure\Bus\Event\RabbitMq\RabbitMqConfigurer" class="TyCode\Shared\Infrastructure\Bus\Event\RabbitMq\RabbitMqConfigurer" autowire="true" autoconfigure="true">
      <argument type="service" id="TyCode\Shared\Infrastructure\Bus\Event\RabbitMq\RabbitMqConnection"/>
    </service>
    <service id="TyCode\Shared\Infrastructure\Bus\Event\EventJsonDeserializer" class="TyCode\Shared\Infrastructure\Bus\Event\EventJsonDeserializer" autowire="true" autoconfigure="true">
      <argument type="service" id="TyCode\Shared\Infrastructure\Bus\Event\EventMapping"/>
    </service>
    <service id="TyCode\Shared\Infrastructure\Bus\Command\SymfonyMessageCommandBus" class="TyCode\Shared\Infrastructure\Bus\Command\SymfonyMessageCommandBus" autowire="true" autoconfigure="true">
      <argument type="tagged_iterator" tag="tycode.command_handler"/>
    </service>
    <service id="TyCode\Shared\Infrastructure\Bus\Query\SymfonyMessageQueryBus" class="TyCode\Shared\Infrastructure\Bus\Query\SymfonyMessageQueryBus" autowire="true" autoconfigure="true">
      <argument type="tagged_iterator" tag="tycode.query_handler"/>
    </service>
    <service id="TyCode\Shared\Infrastructure\Bus\Event\EventMapping" class="TyCode\Shared\Infrastructure\Bus\Event\EventMapping" autowire="true" autoconfigure="true">
      <argument type="tagged_iterator" tag="seller.event_subscriber"/>
    </service>
    <service id="TyCode\Shared\Infrastructure\Bus\Event\EventSubscriberLocator" class="TyCode\Shared\Infrastructure\Bus\Event\EventSubscriberLocator" autowire="true" autoconfigure="true">
      <argument type="tagged_iterator" tag="seller.event_subscriber"/>
    </service>
    <service id="TyCode\Shared\Infrastructure\Bus\Event\RabbitMq\RabbitMqConnection" class="TyCode\Shared\Infrastructure\Bus\Event\RabbitMq\RabbitMqConnection" autowire="true" autoconfigure="true">
      <argument type="collection">
        <argument key="host">%env(RABBITMQ_HOST)%</argument>
        <argument key="port">%env(RABBITMQ_PORT)%</argument>
        <argument key="login">%env(RABBITMQ_LOGIN)%</argument>
        <argument key="password">%env(RABBITMQ_PASSWORD)%</argument>
        <argument key="read_timeout">2</argument>
        <argument key="write_timeout">2</argument>
        <argument key="connect_timeout">5</argument>
      </argument>
    </service>
    <service id="TyCode\Shared\Infrastructure\Bus\Event\RabbitMq\RabbitMqEventBus" class="TyCode\Shared\Infrastructure\Bus\Event\RabbitMq\RabbitMqEventBus" autowire="true" autoconfigure="true">
      <argument type="service" id="TyCode\Shared\Infrastructure\Bus\Event\RabbitMq\RabbitMqConnection"/>
      <argument>%env(RABBITMQ_EXCHANGE)%</argument>
    </service>
    <service id="TyCode\Shared\Infrastructure\Bus\Event\RabbitMq\RabbitMqEventsConsumer" class="TyCode\Shared\Infrastructure\Bus\Event\RabbitMq\RabbitMqEventsConsumer" autowire="true" autoconfigure="true">
      <argument type="service" id="TyCode\Shared\Infrastructure\Bus\Event\RabbitMq\RabbitMqConnection"/>
      <argument type="service" id="TyCode\Shared\Infrastructure\Bus\Event\EventJsonDeserializer"/>
      <argument>%env(RABBITMQ_EXCHANGE)%</argument>
      <argument>%env(RABBITMQ_MAX_RETRIES)%</argument>
    </service>
    <service id="argument_metadata_factory" class="Symfony\Component\HttpKernel\ControllerMetadata\ArgumentMetadataFactory"/>
    <service id="argument_resolver.backed_enum_resolver" class="Symfony\Component\HttpKernel\Controller\ArgumentResolver\BackedEnumValueResolver">
      <tag priority="100" name="Symfony\Component\HttpKernel\Controller\ArgumentResolver\BackedEnumValueResolver">controller.argument_value_resolver</tag>
    </service>
    <service id="argument_resolver.datetime" class="Symfony\Component\HttpKernel\Controller\ArgumentResolver\DateTimeValueResolver">
      <tag priority="100" name="Symfony\Component\HttpKernel\Controller\ArgumentResolver\DateTimeValueResolver">controller.argument_value_resolver</tag>
      <argument type="service" id="clock" on-invalid="null"/>
    </service>
    <service id="argument_resolver.request_payload" class="Symfony\Component\HttpKernel\Controller\ArgumentResolver\RequestPayloadValueResolver" lazy="true">
      <tag name="Symfony\Component\HttpKernel\Controller\ArgumentResolver\RequestPayloadValueResolver">controller.targeted_value_resolver</tag>
      <tag name="container.error" message="You can neither use &quot;#[MapRequestPayload]&quot; nor &quot;#[MapQueryString]&quot; since the Serializer component is not installed. Try running &quot;composer require symfony/serializer-pack&quot;."/>
    </service>
    <service id="argument_resolver.request_attribute" class="Symfony\Component\HttpKernel\Controller\ArgumentResolver\RequestAttributeValueResolver">
      <tag priority="100" name="Symfony\Component\HttpKernel\Controller\ArgumentResolver\RequestAttributeValueResolver">controller.argument_value_resolver</tag>
    </service>
    <service id="argument_resolver.request" class="Symfony\Component\HttpKernel\Controller\ArgumentResolver\RequestValueResolver">
      <tag priority="50" name="Symfony\Component\HttpKernel\Controller\ArgumentResolver\RequestValueResolver">controller.argument_value_resolver</tag>
    </service>
    <service id="argument_resolver.session" class="Symfony\Component\HttpKernel\Controller\ArgumentResolver\SessionValueResolver">
      <tag priority="50" name="Symfony\Component\HttpKernel\Controller\ArgumentResolver\SessionValueResolver">controller.argument_value_resolver</tag>
    </service>
    <service id="argument_resolver.service" class="Symfony\Component\HttpKernel\Controller\ArgumentResolver\ServiceValueResolver">
      <tag priority="-50" name="Symfony\Component\HttpKernel\Controller\ArgumentResolver\ServiceValueResolver">controller.argument_value_resolver</tag>
      <argument type="service" id=".service_locator.Zbeqssn"/>
    </service>
    <service id="argument_resolver.default" class="Symfony\Component\HttpKernel\Controller\ArgumentResolver\DefaultValueResolver">
      <tag priority="-100" name="Symfony\Component\HttpKernel\Controller\ArgumentResolver\DefaultValueResolver">controller.argument_value_resolver</tag>
    </service>
    <service id="argument_resolver.variadic" class="Symfony\Component\HttpKernel\Controller\ArgumentResolver\VariadicValueResolver">
      <tag priority="-150" name="Symfony\Component\HttpKernel\Controller\ArgumentResolver\VariadicValueResolver">controller.argument_value_resolver</tag>
    </service>
    <service id="argument_resolver.query_parameter_value_resolver" class="Symfony\Component\HttpKernel\Controller\ArgumentResolver\QueryParameterValueResolver">
      <tag name="Symfony\Component\HttpKernel\Controller\ArgumentResolver\QueryParameterValueResolver">controller.targeted_value_resolver</tag>
    </service>
    <service id="response_listener" class="Symfony\Component\HttpKernel\EventListener\ResponseListener">
      <tag name="kernel.event_subscriber"/>
      <tag name="container.hot_path"/>
      <argument>UTF-8</argument>
      <argument>false</argument>
    </service>
    <service id="locale_listener" class="Symfony\Component\HttpKernel\EventListener\LocaleListener">
      <tag name="kernel.event_subscriber"/>
      <tag name="container.hot_path"/>
      <tag name="container.hot_path"/>
      <tag name="container.hot_path"/>
      <argument type="service" id="request_stack"/>
      <argument>en</argument>
      <argument type="service" id="router.default" on-invalid="ignore"/>
      <argument>false</argument>
      <argument type="collection"/>
    </service>
    <service id="validate_request_listener" class="Symfony\Component\HttpKernel\EventListener\ValidateRequestListener">
      <tag name="kernel.event_subscriber"/>
      <tag name="container.hot_path"/>
    </service>
    <service id="disallow_search_engine_index_response_listener" class="Symfony\Component\HttpKernel\EventListener\DisallowRobotsIndexingListener">
      <tag name="kernel.event_subscriber"/>
      <tag name="container.hot_path"/>
    </service>
    <service id="error_controller" class="Symfony\Component\HttpKernel\Controller\ErrorController" public="true">
      <argument type="service" id="http_kernel"/>
      <argument>error_controller</argument>
      <argument type="service" id="error_handler.error_renderer.html"/>
    </service>
    <service id="exception_listener" class="Symfony\Component\HttpKernel\EventListener\ErrorListener">
      <tag name="kernel.event_subscriber"/>
      <tag name="monolog.logger" channel="request"/>
      <tag name="container.hot_path"/>
      <tag name="container.hot_path"/>
      <argument>error_controller</argument>
      <argument type="service" id="logger" on-invalid="null"/>
      <argument>true</argument>
      <argument type="collection"/>
    </service>
    <service id="controller.cache_attribute_listener" class="Symfony\Component\HttpKernel\EventListener\CacheAttributeListener">
      <tag name="kernel.event_subscriber"/>
      <tag name="container.hot_path"/>
      <tag name="container.hot_path"/>
    </service>
    <service id="parameter_bag" class="Symfony\Component\DependencyInjection\ParameterBag\ContainerBag">
      <argument type="service" id="service_container"/>
    </service>
    <service id="http_kernel" class="Symfony\Component\HttpKernel\HttpKernel" public="true">
      <tag name="container.hot_path"/>
      <tag name="container.preload" class="Symfony\Component\Runtime\Runner\Symfony\HttpKernelRunner"/>
      <tag name="container.preload" class="Symfony\Component\Runtime\Runner\Symfony\ResponseRunner"/>
      <tag name="container.preload" class="Symfony\Component\Runtime\SymfonyRuntime"/>
      <argument type="service" id="debug.event_dispatcher"/>
      <argument type="service" id="debug.controller_resolver"/>
      <argument type="service" id="request_stack"/>
      <argument type="service" id="debug.argument_resolver"/>
      <argument>true</argument>
    </service>
    <service id="request_stack" class="Symfony\Component\HttpFoundation\RequestStack" public="true"/>
    <service id="http_cache" class="Symfony\Bundle\FrameworkBundle\HttpCache\HttpCache">
      <tag name="container.hot_path"/>
      <argument type="service" id="kernel"/>
      <argument type="service" id="http_cache.store"/>
      <argument>null</argument>
      <argument type="collection">
        <argument key="debug">true</argument>
      </argument>
    </service>
    <service id="http_cache.store" class="Symfony\Component\HttpKernel\HttpCache\Store">
      <argument>/mnt/d/Study/vhosts-php/ecommerce/ms/Seller/var/cache/dev/http_cache</argument>
    </service>
    <service id="url_helper" class="Symfony\Component\HttpFoundation\UrlHelper">
      <argument type="service" id="request_stack"/>
      <argument type="service" id="router.default" on-invalid="ignore"/>
    </service>
    <service id="cache_warmer" class="Symfony\Component\HttpKernel\CacheWarmer\CacheWarmerAggregate" public="true">
      <tag name="container.no_preload"/>
      <argument type="tagged_iterator" tag="kernel.cache_warmer"/>
      <argument>true</argument>
      <argument>/mnt/d/Study/vhosts-php/ecommerce/ms/Seller/var/cache/dev/TyCode_ms_Seller_SellerKernelDevDebugContainerDeprecations.log</argument>
    </service>
    <service id="cache_clearer" class="Symfony\Component\HttpKernel\CacheClearer\ChainCacheClearer">
      <argument type="tagged_iterator" tag="kernel.cache_clearer"/>
    </service>
    <service id="filesystem" class="Symfony\Component\Filesystem\Filesystem"/>
    <service id="file_locator" class="Symfony\Component\HttpKernel\Config\FileLocator">
      <argument type="service" id="kernel"/>
    </service>
    <service id="uri_signer" class="Symfony\Component\HttpFoundation\UriSigner">
      <argument>%env(APP_SECRET)%</argument>
    </service>
    <service id="config_cache_factory" class="Symfony\Component\Config\ResourceCheckerConfigCacheFactory">
      <argument type="tagged_iterator" tag="config_cache.resource_checker"/>
    </service>
    <service id="dependency_injection.config.container_parameters_resource_checker" class="Symfony\Component\DependencyInjection\Config\ContainerParametersResourceChecker">
      <tag name="config_cache.resource_checker" priority="-980"/>
      <argument type="service" id="service_container"/>
    </service>
    <service id="config.resource.self_checking_resource_checker" class="Symfony\Component\Config\Resource\SelfCheckingResourceChecker">
      <tag name="config_cache.resource_checker" priority="-990"/>
    </service>
    <service id="services_resetter" class="Symfony\Component\HttpKernel\DependencyInjection\ServicesResetter" public="true">
      <argument type="iterator">
        <argument key="cache.app" type="service" id="cache.app" on-invalid="ignore_uninitialized"/>
        <argument key="cache.system" type="service" id="cache.system" on-invalid="ignore_uninitialized"/>
        <argument key="cache.validator" type="service" id="cache.validator" on-invalid="ignore_uninitialized"/>
        <argument key="cache.serializer" type="service" id="cache.serializer" on-invalid="ignore_uninitialized"/>
        <argument key="cache.annotations" type="service" id="cache.annotations" on-invalid="ignore_uninitialized"/>
        <argument key="cache.property_info" type="service" id="cache.property_info" on-invalid="ignore_uninitialized"/>
        <argument key="cache.messenger.restart_workers_signal" type="service" id="cache.messenger.restart_workers_signal" on-invalid="ignore_uninitialized"/>
        <argument key="debug.stopwatch" type="service" id="debug.stopwatch" on-invalid="ignore_uninitialized"/>
        <argument key="debug.event_dispatcher" type="service" id="debug.event_dispatcher" on-invalid="ignore_uninitialized"/>
        <argument key="session_listener" type="service" id="session_listener" on-invalid="ignore_uninitialized"/>
        <argument key="messenger.transport.in_memory.factory" type="service" id="messenger.transport.in_memory.factory" on-invalid="ignore_uninitialized"/>
      </argument>
      <argument type="collection">
        <argument key="cache.app" type="collection">
          <argument>reset</argument>
        </argument>
        <argument key="cache.system" type="collection">
          <argument>reset</argument>
        </argument>
        <argument key="cache.validator" type="collection">
          <argument>reset</argument>
        </argument>
        <argument key="cache.serializer" type="collection">
          <argument>reset</argument>
        </argument>
        <argument key="cache.annotations" type="collection">
          <argument>reset</argument>
        </argument>
        <argument key="cache.property_info" type="collection">
          <argument>reset</argument>
        </argument>
        <argument key="cache.messenger.restart_workers_signal" type="collection">
          <argument>reset</argument>
        </argument>
        <argument key="debug.stopwatch" type="collection">
          <argument>reset</argument>
        </argument>
        <argument key="debug.event_dispatcher" type="collection">
          <argument>reset</argument>
        </argument>
        <argument key="session_listener" type="collection">
          <argument>reset</argument>
        </argument>
        <argument key="messenger.transport.in_memory.factory" type="collection">
          <argument>reset</argument>
        </argument>
      </argument>
    </service>
    <service id="reverse_container" class="Symfony\Component\DependencyInjection\ReverseContainer">
      <argument type="service" id="service_container"/>
      <argument type="service" id=".service_locator.XXv1IfR"/>
    </service>
    <service id="container.env_var_processor" class="Symfony\Component\DependencyInjection\EnvVarProcessor">
      <tag name="container.env_var_processor"/>
      <argument type="service" id="service_container"/>
      <argument type="tagged_iterator" tag="container.env_var_loader"/>
    </service>
    <service id="slugger" class="Symfony\Component\String\Slugger\SluggerInterface">
      <tag name="container.error" message="You cannot use the &quot;slugger&quot; service since the Translation contracts are not installed. Try running &quot;composer require symfony/translation&quot;."/>
    </service>
    <service id="container.getenv" class="Closure">
      <tag name="routing.expression_language_function" function="env"/>
      <argument type="collection">
        <argument type="service" id="service_container"/>
        <argument>getEnv</argument>
      </argument>
      <factory class="Closure" method="fromCallable"/>
    </service>
    <service id="container.get_routing_condition_service" class="Closure" public="true">
      <tag name="routing.expression_language_function" function="service"/>
      <argument type="collection">
        <argument type="service" id="messenger.retry_strategy_locator"/>
        <argument>get</argument>
      </argument>
      <factory class="Closure" method="fromCallable"/>
    </service>
    <service id="container.env" class="Symfony\Component\String\LazyString" constructor="fromCallable" abstract="true">
      <argument type="service" id="container.getenv"/>
    </service>
    <service id="config_builder.warmer" class="Symfony\Bundle\FrameworkBundle\CacheWarmer\ConfigBuilderCacheWarmer">
      <tag name="kernel.cache_warmer"/>
      <argument type="service" id="kernel"/>
      <argument type="service" id="logger" on-invalid="null"/>
    </service>
    <service id="clock" class="Symfony\Component\Clock\Clock"/>
    <service id="Symfony\Component\Config\Loader\LoaderInterface" class="Symfony\Component\Config\Loader\LoaderInterface" abstract="true">
      <tag name="container.excluded"/>
    </service>
    <service id="Symfony\Component\HttpFoundation\Request" class="Symfony\Component\HttpFoundation\Request" abstract="true">
      <tag name="container.excluded"/>
    </service>
    <service id="Symfony\Component\HttpFoundation\Response" class="Symfony\Component\HttpFoundation\Response" abstract="true">
      <tag name="container.excluded"/>
    </service>
    <service id="Symfony\Component\HttpFoundation\Session\SessionInterface" class="Symfony\Component\HttpFoundation\Session\SessionInterface" abstract="true">
      <tag name="container.excluded"/>
    </service>
    <service id="fragment.handler" class="Symfony\Component\HttpKernel\DependencyInjection\LazyLoadingFragmentHandler">
      <argument type="service" id=".service_locator.lLv4pWF"/>
      <argument type="service" id="request_stack"/>
      <argument>true</argument>
    </service>
    <service id="fragment.uri_generator" class="Symfony\Component\HttpKernel\Fragment\FragmentUriGenerator">
      <argument>/_fragment</argument>
      <argument type="service" id="uri_signer"/>
      <argument type="service" id="request_stack"/>
    </service>
    <service id="fragment.renderer.inline" class="Symfony\Component\HttpKernel\Fragment\InlineFragmentRenderer">
      <tag name="kernel.fragment_renderer" alias="inline"/>
      <argument type="service" id="http_kernel"/>
      <argument type="service" id="debug.event_dispatcher"/>
      <call method="setFragmentPath">
        <argument>/_fragment</argument>
      </call>
    </service>
    <service id="error_handler.error_renderer.html" class="Symfony\Component\ErrorHandler\ErrorRenderer\HtmlErrorRenderer">
      <argument type="service">
        <service>
          <argument type="service" id="request_stack"/>
          <argument>true</argument>
          <factory class="Symfony\Component\ErrorHandler\ErrorRenderer\HtmlErrorRenderer" method="isDebug"/>
        </service>
      </argument>
      <argument>UTF-8</argument>
      <argument type="service" id="debug.file_link_formatter" on-invalid="null"/>
      <argument>/mnt/d/Study/vhosts-php/ecommerce/ms/Seller</argument>
      <argument type="service">
        <service>
          <argument type="service" id="request_stack"/>
          <factory class="Symfony\Component\ErrorHandler\ErrorRenderer\HtmlErrorRenderer" method="getAndCleanOutputBuffer"/>
        </service>
      </argument>
      <argument type="service" id="logger" on-invalid="null"/>
    </service>
    <service id="process.messenger.process_message_handler" class="Symfony\Component\Process\Messenger\RunProcessMessageHandler">
      <tag name="messenger.message_handler"/>
    </service>
    <service id="console.error_listener" class="Symfony\Component\Console\EventListener\ErrorListener">
      <tag name="kernel.event_subscriber"/>
      <tag name="monolog.logger" channel="console"/>
      <tag name="container.no_preload"/>
      <argument type="service" id="logger" on-invalid="null"/>
    </service>
    <service id="console.suggest_missing_package_subscriber" class="Symfony\Bundle\FrameworkBundle\EventListener\SuggestMissingPackageSubscriber">
      <tag name="kernel.event_subscriber"/>
      <tag name="container.no_preload"/>
    </service>
    <service id="console.command.about" class="Symfony\Bundle\FrameworkBundle\Command\AboutCommand">
      <tag name="console.command"/>
      <tag name="container.no_preload"/>
      <call method="setName">
        <argument>about</argument>
      </call>
      <call method="setDescription">
        <argument>Display information about the current project</argument>
      </call>
    </service>
    <service id="console.command.assets_install" class="Symfony\Bundle\FrameworkBundle\Command\AssetsInstallCommand">
      <tag name="console.command"/>
      <tag name="container.no_preload"/>
      <argument type="service" id="filesystem"/>
      <argument>/mnt/d/Study/vhosts-php/ecommerce/ms/Seller</argument>
      <call method="setName">
        <argument>assets:install</argument>
      </call>
      <call method="setDescription">
        <argument>Install bundle's web assets under a public directory</argument>
      </call>
    </service>
    <service id="console.command.cache_clear" class="Symfony\Bundle\FrameworkBundle\Command\CacheClearCommand">
      <tag name="console.command"/>
      <tag name="container.no_preload"/>
      <argument type="service" id="cache_clearer"/>
      <argument type="service" id="filesystem"/>
      <call method="setName">
        <argument>cache:clear</argument>
      </call>
      <call method="setDescription">
        <argument>Clear the cache</argument>
      </call>
    </service>
    <service id="console.command.cache_pool_clear" class="Symfony\Bundle\FrameworkBundle\Command\CachePoolClearCommand">
      <tag name="console.command"/>
      <tag name="container.no_preload"/>
      <argument type="service" id="cache.global_clearer"/>
      <argument type="collection">
        <argument>cache.app</argument>
        <argument>cache.system</argument>
        <argument>cache.validator</argument>
        <argument>cache.serializer</argument>
        <argument>cache.annotations</argument>
        <argument>cache.property_info</argument>
        <argument>cache.messenger.restart_workers_signal</argument>
      </argument>
      <call method="setName">
        <argument>cache:pool:clear</argument>
      </call>
      <call method="setDescription">
        <argument>Clear cache pools</argument>
      </call>
    </service>
    <service id="console.command.cache_pool_prune" class="Symfony\Bundle\FrameworkBundle\Command\CachePoolPruneCommand">
      <tag name="console.command"/>
      <tag name="container.no_preload"/>
      <argument type="collection"/>
      <call method="setName">
        <argument>cache:pool:prune</argument>
      </call>
      <call method="setDescription">
        <argument>Prune cache pools</argument>
      </call>
    </service>
    <service id="console.command.cache_pool_invalidate_tags" class="Symfony\Bundle\FrameworkBundle\Command\CachePoolInvalidateTagsCommand">
      <tag name="console.command"/>
      <tag name="container.no_preload"/>
      <argument type="service" id=".service_locator.NBUFN6A"/>
      <call method="setName">
        <argument>cache:pool:invalidate-tags</argument>
      </call>
      <call method="setDescription">
        <argument>Invalidate cache tags for all or a specific pool</argument>
      </call>
    </service>
    <service id="console.command.cache_pool_delete" class="Symfony\Bundle\FrameworkBundle\Command\CachePoolDeleteCommand">
      <tag name="console.command"/>
      <tag name="container.no_preload"/>
      <argument type="service" id="cache.global_clearer"/>
      <argument type="collection">
        <argument>cache.app</argument>
        <argument>cache.system</argument>
        <argument>cache.validator</argument>
        <argument>cache.serializer</argument>
        <argument>cache.annotations</argument>
        <argument>cache.property_info</argument>
        <argument>cache.messenger.restart_workers_signal</argument>
      </argument>
      <call method="setName">
        <argument>cache:pool:delete</argument>
      </call>
      <call method="setDescription">
        <argument>Delete an item from a cache pool</argument>
      </call>
    </service>
    <service id="console.command.cache_pool_list" class="Symfony\Bundle\FrameworkBundle\Command\CachePoolListCommand">
      <tag name="console.command"/>
      <tag name="container.no_preload"/>
      <argument type="collection">
        <argument>cache.app</argument>
        <argument>cache.system</argument>
        <argument>cache.validator</argument>
        <argument>cache.serializer</argument>
        <argument>cache.annotations</argument>
        <argument>cache.property_info</argument>
        <argument>cache.messenger.restart_workers_signal</argument>
      </argument>
      <call method="setName">
        <argument>cache:pool:list</argument>
      </call>
      <call method="setDescription">
        <argument>List available cache pools</argument>
      </call>
    </service>
    <service id="console.command.cache_warmup" class="Symfony\Bundle\FrameworkBundle\Command\CacheWarmupCommand">
      <tag name="console.command"/>
      <tag name="container.no_preload"/>
      <argument type="service" id="cache_warmer"/>
      <call method="setName">
        <argument>cache:warmup</argument>
      </call>
      <call method="setDescription">
        <argument>Warm up an empty cache</argument>
      </call>
    </service>
    <service id="console.command.config_debug" class="Symfony\Bundle\FrameworkBundle\Command\ConfigDebugCommand">
      <tag name="console.command"/>
      <tag name="container.no_preload"/>
      <call method="setName">
        <argument>debug:config</argument>
      </call>
      <call method="setDescription">
        <argument>Dump the current configuration for an extension</argument>
      </call>
    </service>
    <service id="console.command.config_dump_reference" class="Symfony\Bundle\FrameworkBundle\Command\ConfigDumpReferenceCommand">
      <tag name="console.command"/>
      <tag name="container.no_preload"/>
      <call method="setName">
        <argument>config:dump-reference</argument>
      </call>
      <call method="setDescription">
        <argument>Dump the default configuration for an extension</argument>
      </call>
    </service>
    <service id="console.command.container_debug" class="Symfony\Bundle\FrameworkBundle\Command\ContainerDebugCommand">
      <tag name="console.command"/>
      <tag name="container.no_preload"/>
      <call method="setName">
        <argument>debug:container</argument>
      </call>
      <call method="setDescription">
        <argument>Display current services for an application</argument>
      </call>
    </service>
    <service id="console.command.container_lint" class="Symfony\Bundle\FrameworkBundle\Command\ContainerLintCommand">
      <tag name="console.command"/>
      <tag name="container.no_preload"/>
      <call method="setName">
        <argument>lint:container</argument>
      </call>
      <call method="setDescription">
        <argument>Ensure that arguments injected into services match type declarations</argument>
      </call>
    </service>
    <service id="console.command.debug_autowiring" class="Symfony\Bundle\FrameworkBundle\Command\DebugAutowiringCommand">
      <tag name="console.command"/>
      <tag name="container.no_preload"/>
      <argument>null</argument>
      <argument type="service" id="debug.file_link_formatter" on-invalid="null"/>
      <call method="setName">
        <argument>debug:autowiring</argument>
      </call>
      <call method="setDescription">
        <argument>List classes/interfaces you can use for autowiring</argument>
      </call>
    </service>
    <service id="console.command.dotenv_debug" class="Symfony\Component\Dotenv\Command\DebugCommand">
      <tag name="console.command"/>
      <tag name="container.no_preload"/>
      <argument>dev</argument>
      <argument>/mnt/d/Study/vhosts-php/ecommerce/ms/Seller</argument>
      <call method="setName">
        <argument>debug:dotenv</argument>
      </call>
      <call method="setDescription">
        <argument>List all dotenv files with variables and values</argument>
      </call>
    </service>
    <service id="console.command.event_dispatcher_debug" class="Symfony\Bundle\FrameworkBundle\Command\EventDispatcherDebugCommand">
      <tag name="console.command"/>
      <tag name="container.no_preload"/>
      <argument type="service" id=".service_locator.9ETxUxh"/>
      <call method="setName">
        <argument>debug:event-dispatcher</argument>
      </call>
      <call method="setDescription">
        <argument>Display configured listeners for an application</argument>
      </call>
    </service>
    <service id="console.command.messenger_consume_messages" class="Symfony\Component\Messenger\Command\ConsumeMessagesCommand">
      <tag name="console.command"/>
      <tag name="monolog.logger" channel="messenger"/>
      <tag name="container.no_preload"/>
      <argument type="service" id="messenger.routable_message_bus"/>
      <argument type="service" id="messenger.receiver_locator"/>
      <argument type="service" id="debug.event_dispatcher"/>
      <argument type="service" id="logger" on-invalid="null"/>
      <argument type="collection"/>
      <argument type="service" id="messenger.listener.reset_services" on-invalid="null"/>
      <argument type="collection">
        <argument>messenger.bus.default</argument>
      </argument>
      <argument>null</argument>
      <argument>null</argument>
      <call method="setName">
        <argument>messenger:consume</argument>
      </call>
      <call method="setDescription">
        <argument>Consume messages</argument>
      </call>
    </service>
    <service id="console.command.messenger_setup_transports" class="Symfony\Component\Messenger\Command\SetupTransportsCommand">
      <tag name="console.command"/>
      <tag name="container.no_preload"/>
      <argument type="service" id="messenger.receiver_locator"/>
      <argument type="collection"/>
      <call method="setName">
        <argument>messenger:setup-transports</argument>
      </call>
      <call method="setDescription">
        <argument>Prepare the required infrastructure for the transport</argument>
      </call>
    </service>
    <service id="console.command.messenger_debug" class="Symfony\Component\Messenger\Command\DebugCommand">
      <tag name="console.command"/>
      <tag name="container.no_preload"/>
      <argument type="collection">
        <argument key="messenger.bus.default" type="collection">
          <argument key="Symfony\Component\Process\Messenger\RunProcessMessage" type="collection">
            <argument type="collection">
              <argument>process.messenger.process_message_handler</argument>
              <argument type="collection"/>
            </argument>
          </argument>
          <argument key="Symfony\Component\Console\Messenger\RunCommandMessage" type="collection">
            <argument type="collection">
              <argument>console.messenger.execute_command_handler</argument>
              <argument type="collection"/>
            </argument>
          </argument>
          <argument key="Symfony\Component\Messenger\Message\RedispatchMessage" type="collection">
            <argument type="collection">
              <argument>messenger.redispatch_message_handler</argument>
              <argument type="collection"/>
            </argument>
          </argument>
        </argument>
      </argument>
      <call method="setName">
        <argument>debug:messenger</argument>
      </call>
      <call method="setDescription">
        <argument>List messages you can dispatch using the message buses</argument>
      </call>
    </service>
    <service id="console.command.messenger_stop_workers" class="Symfony\Component\Messenger\Command\StopWorkersCommand">
      <tag name="console.command"/>
      <tag name="container.no_preload"/>
      <argument type="service" id="cache.messenger.restart_workers_signal"/>
      <call method="setName">
        <argument>messenger:stop-workers</argument>
      </call>
      <call method="setDescription">
        <argument>Stop workers after their current message</argument>
      </call>
    </service>
    <service id="console.command.messenger_stats" class="Symfony\Component\Messenger\Command\StatsCommand">
      <tag name="console.command"/>
      <tag name="container.no_preload"/>
      <argument type="service" id="messenger.receiver_locator"/>
      <argument type="collection"/>
      <call method="setName">
        <argument>messenger:stats</argument>
      </call>
      <call method="setDescription">
        <argument>Show the message count for one or more transports</argument>
      </call>
    </service>
    <service id="console.command.router_debug" class="Symfony\Bundle\FrameworkBundle\Command\RouterDebugCommand">
      <tag name="console.command"/>
      <tag name="container.no_preload"/>
      <argument type="service" id="router.default"/>
      <argument type="service" id="debug.file_link_formatter" on-invalid="null"/>
      <call method="setName">
        <argument>debug:router</argument>
      </call>
      <call method="setDescription">
        <argument>Display current routes for an application</argument>
      </call>
    </service>
    <service id="console.command.router_match" class="Symfony\Bundle\FrameworkBundle\Command\RouterMatchCommand">
      <tag name="console.command"/>
      <tag name="container.no_preload"/>
      <argument type="service" id="router.default"/>
      <argument type="tagged_iterator" tag="routing.expression_language_provider"/>
      <call method="setName">
        <argument>router:match</argument>
      </call>
      <call method="setDescription">
        <argument>Help debug routes by simulating a path info match</argument>
      </call>
    </service>
    <service id="console.command.yaml_lint" class="Symfony\Bundle\FrameworkBundle\Command\YamlLintCommand">
      <tag name="console.command"/>
      <tag name="container.no_preload"/>
      <call method="setName">
        <argument>lint:yaml</argument>
      </call>
      <call method="setDescription">
        <argument>Lint a YAML file and outputs encountered errors</argument>
      </call>
    </service>
    <service id="console.command.secrets_set" class="Symfony\Bundle\FrameworkBundle\Command\SecretsSetCommand">
      <tag name="console.command"/>
      <tag name="container.no_preload"/>
      <argument type="service" id="secrets.vault"/>
      <argument type="service" id="secrets.local_vault" on-invalid="null"/>
      <call method="setName">
        <argument>secrets:set</argument>
      </call>
      <call method="setDescription">
        <argument>Set a secret in the vault</argument>
      </call>
    </service>
    <service id="console.command.secrets_remove" class="Symfony\Bundle\FrameworkBundle\Command\SecretsRemoveCommand">
      <tag name="console.command"/>
      <tag name="container.no_preload"/>
      <argument type="service" id="secrets.vault"/>
      <argument type="service" id="secrets.local_vault" on-invalid="null"/>
      <call method="setName">
        <argument>secrets:remove</argument>
      </call>
      <call method="setDescription">
        <argument>Remove a secret from the vault</argument>
      </call>
    </service>
    <service id="console.command.secrets_generate_key" class="Symfony\Bundle\FrameworkBundle\Command\SecretsGenerateKeysCommand">
      <tag name="console.command"/>
      <tag name="container.no_preload"/>
      <argument type="service" id="secrets.vault"/>
      <argument type="service" id="secrets.local_vault" on-invalid="ignore"/>
      <call method="setName">
        <argument>secrets:generate-keys</argument>
      </call>
      <call method="setDescription">
        <argument>Generate new encryption keys</argument>
      </call>
    </service>
    <service id="console.command.secrets_list" class="Symfony\Bundle\FrameworkBundle\Command\SecretsListCommand">
      <tag name="console.command"/>
      <tag name="container.no_preload"/>
      <argument type="service" id="secrets.vault"/>
      <argument type="service" id="secrets.local_vault" on-invalid="ignore"/>
      <call method="setName">
        <argument>secrets:list</argument>
      </call>
      <call method="setDescription">
        <argument>List all secrets</argument>
      </call>
    </service>
    <service id="console.command.secrets_decrypt_to_local" class="Symfony\Bundle\FrameworkBundle\Command\SecretsDecryptToLocalCommand">
      <tag name="console.command"/>
      <tag name="container.no_preload"/>
      <argument type="service" id="secrets.vault"/>
      <argument type="service" id="secrets.local_vault" on-invalid="ignore"/>
      <call method="setName">
        <argument>secrets:decrypt-to-local</argument>
      </call>
      <call method="setDescription">
        <argument>Decrypt all secrets and stores them in the local vault</argument>
      </call>
    </service>
    <service id="console.command.secrets_encrypt_from_local" class="Symfony\Bundle\FrameworkBundle\Command\SecretsEncryptFromLocalCommand">
      <tag name="console.command"/>
      <tag name="container.no_preload"/>
      <argument type="service" id="secrets.vault"/>
      <argument type="service" id="secrets.local_vault" on-invalid="ignore"/>
      <call method="setName">
        <argument>secrets:encrypt-from-local</argument>
      </call>
      <call method="setDescription">
        <argument>Encrypt all local secrets to the vault</argument>
      </call>
    </service>
    <service id="console.messenger.application" class="Symfony\Bundle\FrameworkBundle\Console\Application" shared="false">
      <argument type="service" id="kernel"/>
      <call method="setAutoExit">
        <argument>false</argument>
      </call>
    </service>
    <service id="console.messenger.execute_command_handler" class="Symfony\Component\Console\Messenger\RunCommandMessageHandler">
      <tag name="messenger.message_handler"/>
      <argument type="service" id="console.messenger.application"/>
    </service>
    <service id="cache.app" class="Symfony\Component\Cache\Adapter\FilesystemAdapter" public="true">
      <tag name="cache.pool"/>
      <tag name="kernel.reset" method="reset"/>
      <argument>c-f8v6tsXR</argument>
      <argument>0</argument>
      <argument>/mnt/d/Study/vhosts-php/ecommerce/ms/Seller/var/cache/dev/pools/app</argument>
      <argument type="service" id="cache.default_marshaller" on-invalid="ignore"/>
      <call method="setLogger">
        <argument type="service" id="logger" on-invalid="ignore"/>
      </call>
    </service>
    <service id="cache.app.taggable" class="Symfony\Component\Cache\Adapter\TagAwareAdapter">
      <tag name="cache.taggable" pool="cache.app"/>
      <argument type="service" id="cache.app"/>
    </service>
    <service id="cache.system" class="Symfony\Component\Cache\Adapter\AdapterInterface" public="true">
      <tag name="cache.pool"/>
      <tag name="kernel.reset" method="reset"/>
      <argument>7dLPxqO8a8</argument>
      <argument>0</argument>
      <argument>%container.build_id%</argument>
      <argument>/mnt/d/Study/vhosts-php/ecommerce/ms/Seller/var/cache/dev/pools/system</argument>
      <argument type="service" id="logger" on-invalid="ignore"/>
      <factory class="Symfony\Component\Cache\Adapter\AbstractAdapter" method="createSystemCache"/>
    </service>
    <service id="cache.validator" class="Symfony\Component\Cache\Adapter\AdapterInterface">
      <tag name="cache.pool"/>
      <tag name="kernel.reset" method="reset"/>
      <argument>G9CXFmxnEW</argument>
      <argument>0</argument>
      <argument>%container.build_id%</argument>
      <argument>/mnt/d/Study/vhosts-php/ecommerce/ms/Seller/var/cache/dev/pools/system</argument>
      <argument type="service" id="logger" on-invalid="ignore"/>
      <factory class="Symfony\Component\Cache\Adapter\AbstractAdapter" method="createSystemCache"/>
    </service>
    <service id="cache.serializer" class="Symfony\Component\Cache\Adapter\AdapterInterface">
      <tag name="cache.pool"/>
      <tag name="kernel.reset" method="reset"/>
      <argument>JmDaPDwihs</argument>
      <argument>0</argument>
      <argument>%container.build_id%</argument>
      <argument>/mnt/d/Study/vhosts-php/ecommerce/ms/Seller/var/cache/dev/pools/system</argument>
      <argument type="service" id="logger" on-invalid="ignore"/>
      <factory class="Symfony\Component\Cache\Adapter\AbstractAdapter" method="createSystemCache"/>
    </service>
    <service id="cache.annotations" class="Symfony\Component\Cache\Adapter\AdapterInterface">
      <tag name="cache.pool"/>
      <tag name="kernel.reset" method="reset"/>
      <argument>+6QaJqkIpv</argument>
      <argument>0</argument>
      <argument>%container.build_id%</argument>
      <argument>/mnt/d/Study/vhosts-php/ecommerce/ms/Seller/var/cache/dev/pools/system</argument>
      <argument type="service" id="logger" on-invalid="ignore"/>
      <factory class="Symfony\Component\Cache\Adapter\AbstractAdapter" method="createSystemCache"/>
    </service>
    <service id="cache.property_info" class="Symfony\Component\Cache\Adapter\AdapterInterface">
      <tag name="cache.pool"/>
      <tag name="kernel.reset" method="reset"/>
      <argument>5reD3WRvLf</argument>
      <argument>0</argument>
      <argument>%container.build_id%</argument>
      <argument>/mnt/d/Study/vhosts-php/ecommerce/ms/Seller/var/cache/dev/pools/system</argument>
      <argument type="service" id="logger" on-invalid="ignore"/>
      <factory class="Symfony\Component\Cache\Adapter\AbstractAdapter" method="createSystemCache"/>
    </service>
    <service id="cache.messenger.restart_workers_signal" class="Symfony\Component\Cache\Adapter\FilesystemAdapter">
      <tag name="cache.pool"/>
      <tag name="kernel.reset" method="reset"/>
      <argument>orBnlUP+rT</argument>
      <argument>0</argument>
      <argument>/mnt/d/Study/vhosts-php/ecommerce/ms/Seller/var/cache/dev/pools/app</argument>
      <argument type="service" id="cache.default_marshaller" on-invalid="ignore"/>
      <call method="setLogger">
        <argument type="service" id="logger" on-invalid="ignore"/>
      </call>
    </service>
    <service id="cache.adapter.system" class="Symfony\Component\Cache\Adapter\AdapterInterface" abstract="true">
      <tag name="cache.pool" clearer="cache.system_clearer" reset="reset"/>
      <tag name="monolog.logger" channel="cache"/>
      <argument></argument>
      <argument>0</argument>
      <argument>%container.build_id%</argument>
      <argument>/mnt/d/Study/vhosts-php/ecommerce/ms/Seller/var/cache/dev/pools/system</argument>
      <argument type="service" id="logger" on-invalid="ignore"/>
      <factory class="Symfony\Component\Cache\Adapter\AbstractAdapter" method="createSystemCache"/>
    </service>
    <service id="cache.adapter.apcu" class="Symfony\Component\Cache\Adapter\ApcuAdapter" abstract="true">
      <tag name="cache.pool" clearer="cache.default_clearer" reset="reset"/>
      <tag name="monolog.logger" channel="cache"/>
      <argument></argument>
      <argument>0</argument>
      <argument>%container.build_id%</argument>
      <call method="setLogger">
        <argument type="service" id="logger" on-invalid="ignore"/>
      </call>
    </service>
    <service id="cache.adapter.filesystem" class="Symfony\Component\Cache\Adapter\FilesystemAdapter" abstract="true">
      <tag name="cache.pool" clearer="cache.default_clearer" reset="reset"/>
      <tag name="monolog.logger" channel="cache"/>
      <argument></argument>
      <argument>0</argument>
      <argument>/mnt/d/Study/vhosts-php/ecommerce/ms/Seller/var/cache/dev/pools/app</argument>
      <argument type="service" id="cache.default_marshaller" on-invalid="ignore"/>
      <call method="setLogger">
        <argument type="service" id="logger" on-invalid="ignore"/>
      </call>
    </service>
    <service id="cache.adapter.psr6" class="Symfony\Component\Cache\Adapter\ProxyAdapter" abstract="true">
      <tag name="cache.pool" provider="cache.default_psr6_provider" clearer="cache.default_clearer" reset="reset"/>
      <argument type="abstract">PSR-6 provider service</argument>
      <argument></argument>
      <argument>0</argument>
    </service>
    <service id="cache.adapter.redis" class="Symfony\Component\Cache\Adapter\RedisAdapter" abstract="true">
      <tag name="cache.pool" provider="cache.default_redis_provider" clearer="cache.default_clearer" reset="reset"/>
      <tag name="monolog.logger" channel="cache"/>
      <argument type="abstract">Redis connection service</argument>
      <argument></argument>
      <argument>0</argument>
      <argument type="service" id="cache.default_marshaller" on-invalid="ignore"/>
      <call method="setLogger">
        <argument type="service" id="logger" on-invalid="ignore"/>
      </call>
    </service>
    <service id="cache.adapter.redis_tag_aware" class="Symfony\Component\Cache\Adapter\RedisTagAwareAdapter" abstract="true">
      <tag name="cache.pool" provider="cache.default_redis_provider" clearer="cache.default_clearer" reset="reset"/>
      <tag name="monolog.logger" channel="cache"/>
      <argument type="abstract">Redis connection service</argument>
      <argument></argument>
      <argument>0</argument>
      <argument type="service" id="cache.default_marshaller" on-invalid="ignore"/>
      <call method="setLogger">
        <argument type="service" id="logger" on-invalid="ignore"/>
      </call>
    </service>
    <service id="cache.adapter.memcached" class="Symfony\Component\Cache\Adapter\MemcachedAdapter" abstract="true">
      <tag name="cache.pool" provider="cache.default_memcached_provider" clearer="cache.default_clearer" reset="reset"/>
      <tag name="monolog.logger" channel="cache"/>
      <argument type="abstract">Memcached connection service</argument>
      <argument></argument>
      <argument>0</argument>
      <argument type="service" id="cache.default_marshaller" on-invalid="ignore"/>
      <call method="setLogger">
        <argument type="service" id="logger" on-invalid="ignore"/>
      </call>
    </service>
    <service id="cache.adapter.doctrine_dbal" class="Symfony\Component\Cache\Adapter\DoctrineDbalAdapter" abstract="true">
      <tag name="cache.pool" provider="cache.default_doctrine_dbal_provider" clearer="cache.default_clearer" reset="reset"/>
      <tag name="monolog.logger" channel="cache"/>
      <argument type="abstract">DBAL connection service</argument>
      <argument></argument>
      <argument>0</argument>
      <argument type="collection"/>
      <argument type="service" id="cache.default_marshaller" on-invalid="ignore"/>
      <call method="setLogger">
        <argument type="service" id="logger" on-invalid="ignore"/>
      </call>
    </service>
    <service id="cache.adapter.pdo" class="Symfony\Component\Cache\Adapter\PdoAdapter" abstract="true">
      <tag name="cache.pool" provider="cache.default_pdo_provider" clearer="cache.default_clearer" reset="reset"/>
      <tag name="monolog.logger" channel="cache"/>
      <argument type="abstract">PDO connection service</argument>
      <argument></argument>
      <argument>0</argument>
      <argument type="collection"/>
      <argument type="service" id="cache.default_marshaller" on-invalid="ignore"/>
      <call method="setLogger">
        <argument type="service" id="logger" on-invalid="ignore"/>
      </call>
    </service>
    <service id="cache.adapter.array" class="Symfony\Component\Cache\Adapter\ArrayAdapter" abstract="true">
      <tag name="cache.pool" clearer="cache.default_clearer" reset="reset"/>
      <tag name="monolog.logger" channel="cache"/>
      <argument>0</argument>
      <call method="setLogger">
        <argument type="service" id="logger" on-invalid="ignore"/>
      </call>
    </service>
    <service id="cache.default_marshaller" class="Symfony\Component\Cache\Marshaller\DefaultMarshaller">
      <argument>null</argument>
      <argument>true</argument>
    </service>
    <service id="cache.default_clearer" class="Symfony\Component\HttpKernel\CacheClearer\Psr6CacheClearer">
      <tag name="cache.pool.clearer"/>
      <argument type="collection">
        <argument key="cache.app" type="service" id="cache.app" on-invalid="ignore_uninitialized"/>
        <argument key="cache.messenger.restart_workers_signal" type="service" id="cache.messenger.restart_workers_signal" on-invalid="ignore_uninitialized"/>
      </argument>
    </service>
    <service id="cache.system_clearer" class="Symfony\Component\HttpKernel\CacheClearer\Psr6CacheClearer" public="true">
      <tag name="cache.pool.clearer"/>
      <tag name="kernel.cache_clearer"/>
      <argument type="collection">
        <argument key="cache.system" type="service" id="cache.system" on-invalid="ignore_uninitialized"/>
        <argument key="cache.validator" type="service" id="cache.validator" on-invalid="ignore_uninitialized"/>
        <argument key="cache.serializer" type="service" id="cache.serializer" on-invalid="ignore_uninitialized"/>
        <argument key="cache.annotations" type="service" id="cache.annotations" on-invalid="ignore_uninitialized"/>
        <argument key="cache.property_info" type="service" id="cache.property_info" on-invalid="ignore_uninitialized"/>
      </argument>
    </service>
    <service id="cache.global_clearer" class="Symfony\Component\HttpKernel\CacheClearer\Psr6CacheClearer" public="true">
      <tag name="cache.pool.clearer"/>
      <argument type="collection">
        <argument key="cache.app" type="service" id="cache.app" on-invalid="ignore_uninitialized"/>
        <argument key="cache.system" type="service" id="cache.system" on-invalid="ignore_uninitialized"/>
        <argument key="cache.validator" type="service" id="cache.validator" on-invalid="ignore_uninitialized"/>
        <argument key="cache.serializer" type="service" id="cache.serializer" on-invalid="ignore_uninitialized"/>
        <argument key="cache.annotations" type="service" id="cache.annotations" on-invalid="ignore_uninitialized"/>
        <argument key="cache.property_info" type="service" id="cache.property_info" on-invalid="ignore_uninitialized"/>
        <argument key="cache.messenger.restart_workers_signal" type="service" id="cache.messenger.restart_workers_signal" on-invalid="ignore_uninitialized"/>
      </argument>
    </service>
    <service id="debug.error_handler_configurator" class="Symfony\Component\HttpKernel\Debug\ErrorHandlerConfigurator" public="true">
      <tag name="monolog.logger" channel="php"/>
      <argument type="service" id="logger" on-invalid="null"/>
      <argument>null</argument>
      <argument>-1</argument>
      <argument>true</argument>
      <argument>true</argument>
      <argument>null</argument>
    </service>
    <service id="debug.debug_handlers_listener" class="Symfony\Component\HttpKernel\EventListener\DebugHandlersListener">
      <tag name="kernel.event_subscriber"/>
      <tag name="container.hot_path"/>
      <argument>null</argument>
      <argument>%env(bool:default::key:web:default:kernel.runtime_mode:)%</argument>
    </service>
    <service id="debug.file_link_formatter" class="Symfony\Component\ErrorHandler\ErrorRenderer\FileLinkFormatter">
      <argument>%env(default::SYMFONY_IDE)%</argument>
    </service>
    <service id="debug.stopwatch" class="Symfony\Component\Stopwatch\Stopwatch" public="true">
      <tag name="kernel.reset" method="reset"/>
      <argument>true</argument>
    </service>
    <service id="debug.event_dispatcher" class="Symfony\Component\HttpKernel\Debug\TraceableEventDispatcher">
      <tag name="container.hot_path"/>
      <tag name="event_dispatcher">event_dispatcher.dispatcher</tag>
      <tag name="monolog.logger" channel="event"/>
      <tag name="kernel.reset" method="reset"/>
      <tag name="container.decorator" id="event_dispatcher" inner="debug.event_dispatcher.inner"/>
      <argument type="service" id="debug.event_dispatcher.inner"/>
      <argument type="service" id="debug.stopwatch"/>
      <argument type="service" id="logger" on-invalid="null"/>
      <argument type="service" id="request_stack" on-invalid="null"/>
      <call method="addListener">
        <argument>kernel.response</argument>
        <argument type="collection">
          <argument type="service_closure" id="response_listener"/>
          <argument>onKernelResponse</argument>
        </argument>
        <argument>0</argument>
      </call>
      <call method="addListener">
        <argument>kernel.request</argument>
        <argument type="collection">
          <argument type="service_closure" id="locale_listener"/>
          <argument>setDefaultLocale</argument>
        </argument>
        <argument>100</argument>
      </call>
      <call method="addListener">
        <argument>kernel.request</argument>
        <argument type="collection">
          <argument type="service_closure" id="locale_listener"/>
          <argument>onKernelRequest</argument>
        </argument>
        <argument>16</argument>
      </call>
      <call method="addListener">
        <argument>kernel.finish_request</argument>
        <argument type="collection">
          <argument type="service_closure" id="locale_listener"/>
          <argument>onKernelFinishRequest</argument>
        </argument>
        <argument>0</argument>
      </call>
      <call method="addListener">
        <argument>kernel.request</argument>
        <argument type="collection">
          <argument type="service_closure" id="validate_request_listener"/>
          <argument>onKernelRequest</argument>
        </argument>
        <argument>256</argument>
      </call>
      <call method="addListener">
        <argument>kernel.response</argument>
        <argument type="collection">
          <argument type="service_closure" id="disallow_search_engine_index_response_listener"/>
          <argument>onResponse</argument>
        </argument>
        <argument>-255</argument>
      </call>
      <call method="addListener">
        <argument>kernel.controller_arguments</argument>
        <argument type="collection">
          <argument type="service_closure" id="exception_listener"/>
          <argument>onControllerArguments</argument>
        </argument>
        <argument>0</argument>
      </call>
      <call method="addListener">
        <argument>kernel.exception</argument>
        <argument type="collection">
          <argument type="service_closure" id="exception_listener"/>
          <argument>logKernelException</argument>
        </argument>
        <argument>0</argument>
      </call>
      <call method="addListener">
        <argument>kernel.exception</argument>
        <argument type="collection">
          <argument type="service_closure" id="exception_listener"/>
          <argument>onKernelException</argument>
        </argument>
        <argument>-128</argument>
      </call>
      <call method="addListener">
        <argument>kernel.response</argument>
        <argument type="collection">
          <argument type="service_closure" id="exception_listener"/>
          <argument>removeCspHeader</argument>
        </argument>
        <argument>-128</argument>
      </call>
      <call method="addListener">
        <argument>kernel.controller_arguments</argument>
        <argument type="collection">
          <argument type="service_closure" id="controller.cache_attribute_listener"/>
          <argument>onKernelControllerArguments</argument>
        </argument>
        <argument>10</argument>
      </call>
      <call method="addListener">
        <argument>kernel.response</argument>
        <argument type="collection">
          <argument type="service_closure" id="controller.cache_attribute_listener"/>
          <argument>onKernelResponse</argument>
        </argument>
        <argument>-10</argument>
      </call>
      <call method="addListener">
        <argument>console.error</argument>
        <argument type="collection">
          <argument type="service_closure" id="console.error_listener"/>
          <argument>onConsoleError</argument>
        </argument>
        <argument>-128</argument>
      </call>
      <call method="addListener">
        <argument>console.terminate</argument>
        <argument type="collection">
          <argument type="service_closure" id="console.error_listener"/>
          <argument>onConsoleTerminate</argument>
        </argument>
        <argument>-128</argument>
      </call>
      <call method="addListener">
        <argument>console.error</argument>
        <argument type="collection">
          <argument type="service_closure" id="console.suggest_missing_package_subscriber"/>
          <argument>onConsoleError</argument>
        </argument>
        <argument>0</argument>
      </call>
      <call method="addListener">
        <argument>kernel.request</argument>
        <argument type="collection">
          <argument type="service_closure" id="debug.debug_handlers_listener"/>
          <argument>configure</argument>
        </argument>
        <argument>2048</argument>
      </call>
      <call method="addListener">
        <argument>console.command</argument>
        <argument type="collection">
          <argument type="service_closure" id="debug.debug_handlers_listener"/>
          <argument>configure</argument>
        </argument>
        <argument>2048</argument>
      </call>
      <call method="addListener">
        <argument>kernel.request</argument>
        <argument type="collection">
          <argument type="service_closure" id="router_listener"/>
          <argument>onKernelRequest</argument>
        </argument>
        <argument>32</argument>
      </call>
      <call method="addListener">
        <argument>kernel.finish_request</argument>
        <argument type="collection">
          <argument type="service_closure" id="router_listener"/>
          <argument>onKernelFinishRequest</argument>
        </argument>
        <argument>0</argument>
      </call>
      <call method="addListener">
        <argument>kernel.exception</argument>
        <argument type="collection">
          <argument type="service_closure" id="router_listener"/>
          <argument>onKernelException</argument>
        </argument>
        <argument>-64</argument>
      </call>
      <call method="addListener">
        <argument>kernel.request</argument>
        <argument type="collection">
          <argument type="service_closure" id="session_listener"/>
          <argument>onKernelRequest</argument>
        </argument>
        <argument>128</argument>
      </call>
      <call method="addListener">
        <argument>kernel.response</argument>
        <argument type="collection">
          <argument type="service_closure" id="session_listener"/>
          <argument>onKernelResponse</argument>
        </argument>
        <argument>-1000</argument>
      </call>
      <call method="addListener">
        <argument>Symfony\Component\Messenger\Event\WorkerMessageFailedEvent</argument>
        <argument type="collection">
          <argument type="service_closure" id="messenger.retry.send_failed_message_for_retry_listener"/>
          <argument>onMessageFailed</argument>
        </argument>
        <argument>100</argument>
      </call>
      <call method="addListener">
        <argument>Symfony\Component\Messenger\Event\WorkerMessageFailedEvent</argument>
        <argument type="collection">
          <argument type="service_closure" id="messenger.failure.add_error_details_stamp_listener"/>
          <argument>onMessageFailed</argument>
        </argument>
        <argument>200</argument>
      </call>
      <call method="addListener">
        <argument>Symfony\Component\Messenger\Event\WorkerRunningEvent</argument>
        <argument type="collection">
          <argument type="service_closure" id="messenger.listener.dispatch_pcntl_signal_listener"/>
          <argument>onWorkerRunning</argument>
        </argument>
        <argument>100</argument>
      </call>
      <call method="addListener">
        <argument>Symfony\Component\Messenger\Event\WorkerStartedEvent</argument>
        <argument type="collection">
          <argument type="service_closure" id="messenger.listener.stop_worker_on_restart_signal_listener"/>
          <argument>onWorkerStarted</argument>
        </argument>
        <argument>0</argument>
      </call>
      <call method="addListener">
        <argument>Symfony\Component\Messenger\Event\WorkerRunningEvent</argument>
        <argument type="collection">
          <argument type="service_closure" id="messenger.listener.stop_worker_on_restart_signal_listener"/>
          <argument>onWorkerRunning</argument>
        </argument>
        <argument>0</argument>
      </call>
      <call method="addListener">
        <argument>Symfony\Component\Messenger\Event\WorkerMessageFailedEvent</argument>
        <argument type="collection">
          <argument type="service_closure" id="messenger.listener.stop_worker_on_stop_exception_listener"/>
          <argument>onMessageFailed</argument>
        </argument>
        <argument>0</argument>
      </call>
      <call method="addListener">
        <argument>Symfony\Component\Messenger\Event\WorkerRunningEvent</argument>
        <argument type="collection">
          <argument type="service_closure" id="messenger.listener.stop_worker_on_stop_exception_listener"/>
          <argument>onWorkerRunning</argument>
        </argument>
        <argument>0</argument>
      </call>
      <call method="addListener">
        <argument>console.error</argument>
        <argument type="collection">
          <argument type="service_closure" id="maker.console_error_listener"/>
          <argument>onConsoleError</argument>
        </argument>
        <argument>0</argument>
      </call>
      <call method="addListener">
        <argument>console.terminate</argument>
        <argument type="collection">
          <argument type="service_closure" id="maker.console_error_listener"/>
          <argument>onConsoleTerminate</argument>
        </argument>
        <argument>0</argument>
      </call>
    </service>
    <service id="debug.controller_resolver" class="Symfony\Component\HttpKernel\Controller\TraceableControllerResolver">
      <tag name="monolog.logger" channel="request"/>
      <tag name="container.decorator" id="controller_resolver" inner="debug.controller_resolver.inner"/>
      <argument type="service" id="debug.controller_resolver.inner"/>
      <argument type="service" id="debug.stopwatch"/>
    </service>
    <service id="debug.argument_resolver" class="Symfony\Component\HttpKernel\Controller\TraceableArgumentResolver">
      <tag name="container.decorator" id="argument_resolver" inner="debug.argument_resolver.inner"/>
      <argument type="service" id="debug.argument_resolver.inner"/>
      <argument type="service" id="debug.stopwatch"/>
    </service>
    <service id="argument_resolver.not_tagged_controller" class="Symfony\Component\HttpKernel\Controller\ArgumentResolver\NotTaggedControllerValueResolver">
      <tag name="controller.argument_value_resolver" priority="-200"/>
      <argument type="service" id=".service_locator.Zbeqssn"/>
    </service>
    <service id="routing.resolver" class="Symfony\Component\Config\Loader\LoaderResolver">
      <call method="addLoader">
        <argument type="service" id="routing.loader.xml"/>
      </call>
      <call method="addLoader">
        <argument type="service" id="routing.loader.yml"/>
      </call>
      <call method="addLoader">
        <argument type="service" id="routing.loader.php"/>
      </call>
      <call method="addLoader">
        <argument type="service" id="routing.loader.glob"/>
      </call>
      <call method="addLoader">
        <argument type="service" id="routing.loader.directory"/>
      </call>
      <call method="addLoader">
        <argument type="service" id="routing.loader.container"/>
      </call>
      <call method="addLoader">
        <argument type="service" id="routing.loader.attribute"/>
      </call>
      <call method="addLoader">
        <argument type="service" id="routing.loader.attribute.directory"/>
      </call>
      <call method="addLoader">
        <argument type="service" id="routing.loader.attribute.file"/>
      </call>
      <call method="addLoader">
        <argument type="service" id="routing.loader.psr4"/>
      </call>
    </service>
    <service id="routing.loader.xml" class="Symfony\Component\Routing\Loader\XmlFileLoader">
      <tag name="routing.loader"/>
      <argument type="service" id="file_locator"/>
      <argument>dev</argument>
    </service>
    <service id="routing.loader.yml" class="Symfony\Component\Routing\Loader\YamlFileLoader">
      <tag name="routing.loader"/>
      <argument type="service" id="file_locator"/>
      <argument>dev</argument>
    </service>
    <service id="routing.loader.php" class="Symfony\Component\Routing\Loader\PhpFileLoader">
      <tag name="routing.loader"/>
      <argument type="service" id="file_locator"/>
      <argument>dev</argument>
    </service>
    <service id="routing.loader.glob" class="Symfony\Component\Routing\Loader\GlobFileLoader">
      <tag name="routing.loader"/>
      <argument type="service" id="file_locator"/>
      <argument>dev</argument>
    </service>
    <service id="routing.loader.directory" class="Symfony\Component\Routing\Loader\DirectoryLoader">
      <tag name="routing.loader"/>
      <argument type="service" id="file_locator"/>
      <argument>dev</argument>
    </service>
    <service id="routing.loader.container" class="Symfony\Component\Routing\Loader\ContainerLoader">
      <tag name="routing.loader"/>
      <argument type="service" id=".service_locator.l_Ngom6"/>
      <argument>dev</argument>
    </service>
    <service id="routing.loader.attribute" class="Symfony\Bundle\FrameworkBundle\Routing\AttributeRouteControllerLoader">
      <tag name="routing.loader" priority="-10"/>
      <argument>dev</argument>
    </service>
    <service id="routing.loader.attribute.directory" class="Symfony\Component\Routing\Loader\AttributeDirectoryLoader">
      <tag name="routing.loader" priority="-10"/>
      <argument type="service" id="file_locator"/>
      <argument type="service" id="routing.loader.attribute"/>
    </service>
    <service id="routing.loader.attribute.file" class="Symfony\Component\Routing\Loader\AttributeFileLoader">
      <tag name="routing.loader" priority="-10"/>
      <argument type="service" id="file_locator"/>
      <argument type="service" id="routing.loader.attribute"/>
    </service>
    <service id="routing.loader.psr4" class="Symfony\Component\Routing\Loader\Psr4DirectoryLoader">
      <tag name="routing.loader" priority="-10"/>
      <argument type="service" id="file_locator"/>
    </service>
    <service id="routing.loader" class="Symfony\Bundle\FrameworkBundle\Routing\DelegatingLoader" public="true">
      <argument type="service" id="routing.resolver"/>
      <argument type="collection">
        <argument key="utf8">true</argument>
      </argument>
      <argument type="collection"/>
    </service>
    <service id="router.default" class="Symfony\Bundle\FrameworkBundle\Routing\Router">
      <tag name="monolog.logger" channel="router"/>
      <tag name="container.service_subscriber" id="routing.loader"/>
      <argument type="service" id=".service_locator.PvoQzFT.router.default"/>
      <argument>kernel::loadRoutes</argument>
      <argument type="collection">
        <argument key="cache_dir">/mnt/d/Study/vhosts-php/ecommerce/ms/Seller/var/cache/dev</argument>
        <argument key="debug">true</argument>
        <argument key="generator_class">Symfony\Component\Routing\Generator\CompiledUrlGenerator</argument>
        <argument key="generator_dumper_class">Symfony\Component\Routing\Generator\Dumper\CompiledUrlGeneratorDumper</argument>
        <argument key="matcher_class">Symfony\Bundle\FrameworkBundle\Routing\RedirectableCompiledUrlMatcher</argument>
        <argument key="matcher_dumper_class">Symfony\Component\Routing\Matcher\Dumper\CompiledUrlMatcherDumper</argument>
        <argument key="strict_requirements">true</argument>
        <argument key="resource_type">service</argument>
      </argument>
      <argument type="service" id="router.request_context" on-invalid="ignore"/>
      <argument type="service" id="parameter_bag" on-invalid="ignore"/>
      <argument type="service" id="logger" on-invalid="ignore"/>
      <argument>en</argument>
      <call method="setConfigCacheFactory">
        <argument type="service" id="config_cache_factory"/>
      </call>
    </service>
    <service id="router.request_context" class="Symfony\Component\Routing\RequestContext" constructor="fromUri">
      <argument></argument>
      <argument>localhost</argument>
      <argument>http</argument>
      <argument>80</argument>
      <argument>443</argument>
    </service>
    <service id="router.cache_warmer" class="Symfony\Bundle\FrameworkBundle\CacheWarmer\RouterCacheWarmer">
      <tag name="container.service_subscriber" id="router"/>
      <tag name="kernel.cache_warmer"/>
      <argument type="service" id=".service_locator.cUcW89y.router.cache_warmer"/>
    </service>
    <service id="router_listener" class="Symfony\Component\HttpKernel\EventListener\RouterListener">
      <tag name="kernel.event_subscriber"/>
      <tag name="monolog.logger" channel="request"/>
      <tag name="container.hot_path"/>
      <tag name="container.hot_path"/>
      <argument type="service" id="router.default"/>
      <argument type="service" id="request_stack"/>
      <argument type="service" id="router.request_context" on-invalid="ignore"/>
      <argument type="service" id="logger" on-invalid="ignore"/>
      <argument>/mnt/d/Study/vhosts-php/ecommerce/ms/Seller</argument>
      <argument>true</argument>
    </service>
    <service id="Symfony\Bundle\FrameworkBundle\Controller\RedirectController" class="Symfony\Bundle\FrameworkBundle\Controller\RedirectController" public="true">
      <argument type="service" id="router.default"/>
      <argument type="service">
        <service class="int">
          <factory service="router.request_context" method="getHttpPort"/>
        </service>
      </argument>
      <argument type="service">
        <service class="int">
          <factory service="router.request_context" method="getHttpsPort"/>
        </service>
      </argument>
    </service>
    <service id="Symfony\Bundle\FrameworkBundle\Controller\TemplateController" class="Symfony\Bundle\FrameworkBundle\Controller\TemplateController" public="true">
      <argument>null</argument>
    </service>
    <service id="secrets.vault" class="Symfony\Bundle\FrameworkBundle\Secrets\SodiumVault">
      <tag name="container.env_var_loader"/>
      <argument>/mnt/d/Study/vhosts-php/ecommerce/ms/Seller/config/secrets/%env(default:kernel.environment:APP_RUNTIME_ENV)%</argument>
      <argument type="service" id="secrets.decryption_key" on-invalid="ignore"/>
    </service>
    <service id="secrets.decryption_key" class="Symfony\Component\String\LazyString" constructor="fromCallable">
      <argument type="service" id="container.getenv"/>
      <argument>base64:default::SYMFONY_DECRYPTION_SECRET</argument>
    </service>
    <service id="secrets.local_vault" class="Symfony\Bundle\FrameworkBundle\Secrets\DotenvVault">
      <argument>/mnt/d/Study/vhosts-php/ecommerce/ms/Seller/.env.dev.local</argument>
    </service>
    <service id=".cache_connection.GD_MSZC" class="Symfony\Component\Cache\Adapter\AbstractAdapter" constructor="createConnection">
      <argument>redis://localhost</argument>
      <argument type="collection">
        <argument key="lazy">true</argument>
      </argument>
    </service>
    <service id=".cache_connection.JKE6keX" class="Symfony\Component\Cache\Adapter\AbstractAdapter" constructor="createConnection">
      <argument>memcached://localhost</argument>
      <argument type="collection">
        <argument key="lazy">true</argument>
      </argument>
    </service>
    <service id="session.factory" class="Symfony\Component\HttpFoundation\Session\SessionFactory">
      <argument type="service" id="request_stack"/>
      <argument type="service" id="session.storage.factory.native"/>
      <argument type="collection">
        <argument type="service" id="session_listener"/>
        <argument>onSessionUsage</argument>
      </argument>
    </service>
    <service id="session.storage.factory.native" class="Symfony\Component\HttpFoundation\Session\Storage\NativeSessionStorageFactory">
      <argument>%session.storage.options%</argument>
      <argument type="service" id="session.handler.native"/>
      <argument type="service">
        <service class="Symfony\Component\HttpFoundation\Session\Storage\MetadataBag">
          <argument>_sf2_meta</argument>
          <argument>0</argument>
        </service>
      </argument>
      <argument>true</argument>
    </service>
    <service id="session.storage.factory.php_bridge" class="Symfony\Component\HttpFoundation\Session\Storage\PhpBridgeSessionStorageFactory">
      <argument type="service" id="session.handler.native"/>
      <argument type="service">
        <service class="Symfony\Component\HttpFoundation\Session\Storage\MetadataBag">
          <argument>_sf2_meta</argument>
          <argument>0</argument>
        </service>
      </argument>
      <argument>true</argument>
    </service>
    <service id="session.storage.factory.mock_file" class="Symfony\Component\HttpFoundation\Session\Storage\MockFileSessionStorageFactory">
      <argument>/mnt/d/Study/vhosts-php/ecommerce/ms/Seller/var/cache/dev/sessions</argument>
      <argument>MOCKSESSID</argument>
      <argument type="service">
        <service class="Symfony\Component\HttpFoundation\Session\Storage\MetadataBag">
          <argument>_sf2_meta</argument>
          <argument>0</argument>
        </service>
      </argument>
    </service>
    <service id="session.handler.native" class="Symfony\Component\HttpFoundation\Session\Storage\Handler\StrictSessionHandler">
      <argument type="service">
        <service class="SessionHandler"/>
      </argument>
    </service>
    <service id="session.handler.native_file" class="Symfony\Component\HttpFoundation\Session\Storage\Handler\StrictSessionHandler">
      <argument type="service">
        <service class="Symfony\Component\HttpFoundation\Session\Storage\Handler\NativeFileSessionHandler">
          <argument>null</argument>
        </service>
      </argument>
    </service>
    <service id="session.abstract_handler" class="Symfony\Component\HttpFoundation\Session\Storage\Handler\AbstractSessionHandler">
      <argument type="abstract">A string or a connection object</argument>
      <argument type="collection"/>
      <factory class="Symfony\Component\HttpFoundation\Session\Storage\Handler\SessionHandlerFactory" method="createHandler"/>
    </service>
    <service id="session_listener" class="Symfony\Component\HttpKernel\EventListener\SessionListener">
      <tag name="kernel.event_subscriber"/>
      <tag name="kernel.reset" method="reset"/>
      <tag name="container.hot_path"/>
      <tag name="container.hot_path"/>
      <argument type="service" id=".service_locator.cXsfP3P"/>
      <argument>true</argument>
      <argument>%session.storage.options%</argument>
    </service>
    <service id="session.marshaller" class="Symfony\Component\HttpFoundation\Session\Storage\Handler\IdentityMarshaller"/>
    <service id="messenger.senders_locator" class="Symfony\Component\Messenger\Transport\Sender\SendersLocator">
      <argument type="collection"/>
      <argument type="service" id="messenger.retry_strategy_locator"/>
    </service>
    <service id="messenger.middleware.send_message" class="Symfony\Component\Messenger\Middleware\SendMessageMiddleware" abstract="true">
      <tag name="monolog.logger" channel="messenger"/>
      <argument type="service" id="messenger.senders_locator"/>
      <argument type="service" id="debug.event_dispatcher"/>
      <call method="setLogger">
        <argument type="service" id="logger" on-invalid="ignore"/>
      </call>
    </service>
    <service id="messenger.transport.native_php_serializer" class="Symfony\Component\Messenger\Transport\Serialization\PhpSerializer"/>
    <service id="messenger.middleware.handle_message" class="Symfony\Component\Messenger\Middleware\HandleMessageMiddleware" abstract="true">
      <tag name="monolog.logger" channel="messenger"/>
      <argument type="abstract">bus handler resolver</argument>
      <call method="setLogger">
        <argument type="service" id="logger" on-invalid="ignore"/>
      </call>
    </service>
    <service id="messenger.middleware.add_bus_name_stamp_middleware" class="Symfony\Component\Messenger\Middleware\AddBusNameStampMiddleware" abstract="true"/>
    <service id="messenger.middleware.dispatch_after_current_bus" class="Symfony\Component\Messenger\Middleware\DispatchAfterCurrentBusMiddleware"/>
    <service id="messenger.middleware.validation" class="Symfony\Component\Messenger\Middleware\ValidationMiddleware">
      <argument type="service" id="validator"/>
    </service>
    <service id="messenger.middleware.reject_redelivered_message_middleware" class="Symfony\Component\Messenger\Middleware\RejectRedeliveredMessageMiddleware"/>
    <service id="messenger.middleware.failed_message_processing_middleware" class="Symfony\Component\Messenger\Middleware\FailedMessageProcessingMiddleware"/>
    <service id="messenger.middleware.traceable" class="Symfony\Component\Messenger\Middleware\TraceableMiddleware" abstract="true">
      <argument type="service" id="debug.stopwatch"/>
    </service>
    <service id="messenger.middleware.router_context" class="Symfony\Component\Messenger\Middleware\RouterContextMiddleware">
      <argument type="service" id="router.default"/>
    </service>
    <service id="messenger.receiver_locator" class="Symfony\Component\DependencyInjection\ServiceLocator">
      <tag name="container.service_locator"/>
      <argument type="collection"/>
    </service>
    <service id="messenger.transport_factory" class="Symfony\Component\Messenger\Transport\TransportFactory">
      <argument type="tagged_iterator" tag="messenger.transport_factory"/>
    </service>
    <service id="messenger.transport.sync.factory" class="Symfony\Component\Messenger\Transport\Sync\SyncTransportFactory">
      <tag name="messenger.transport_factory"/>
      <argument type="service" id="messenger.routable_message_bus"/>
    </service>
    <service id="messenger.transport.in_memory.factory" class="Symfony\Component\Messenger\Transport\InMemory\InMemoryTransportFactory">
      <tag name="messenger.transport_factory"/>
      <tag name="kernel.reset" method="reset"/>
    </service>
    <service id="messenger.retry_strategy_locator" class="Symfony\Component\DependencyInjection\ServiceLocator">
      <tag name="container.service_locator"/>
      <argument type="collection"/>
    </service>
    <service id="messenger.retry.abstract_multiplier_retry_strategy" class="Symfony\Component\Messenger\Retry\MultiplierRetryStrategy" abstract="true">
      <argument type="abstract">max retries</argument>
      <argument type="abstract">delay ms</argument>
      <argument type="abstract">multiplier</argument>
      <argument type="abstract">max delay ms</argument>
    </service>
    <service id="messenger.retry.send_failed_message_for_retry_listener" class="Symfony\Component\Messenger\EventListener\SendFailedMessageForRetryListener">
      <tag name="kernel.event_subscriber"/>
      <tag name="monolog.logger" channel="messenger"/>
      <argument type="service" id="messenger.retry_strategy_locator"/>
      <argument type="service" id="messenger.retry_strategy_locator"/>
      <argument type="service" id="logger" on-invalid="ignore"/>
      <argument type="service" id="debug.event_dispatcher"/>
    </service>
    <service id="messenger.failure.add_error_details_stamp_listener" class="Symfony\Component\Messenger\EventListener\AddErrorDetailsStampListener">
      <tag name="kernel.event_subscriber"/>
    </service>
    <service id="messenger.listener.dispatch_pcntl_signal_listener" class="Symfony\Component\Messenger\EventListener\DispatchPcntlSignalListener">
      <tag name="kernel.event_subscriber"/>
    </service>
    <service id="messenger.listener.stop_worker_on_restart_signal_listener" class="Symfony\Component\Messenger\EventListener\StopWorkerOnRestartSignalListener">
      <tag name="kernel.event_subscriber"/>
      <tag name="monolog.logger" channel="messenger"/>
      <argument type="service" id="cache.messenger.restart_workers_signal"/>
      <argument type="service" id="logger" on-invalid="ignore"/>
    </service>
    <service id="messenger.listener.stop_worker_signals_listener" class="Symfony\Component\Messenger\EventListener\StopWorkerOnSignalsListener">
      <tag name="monolog.logger" channel="messenger"/>
      <argument>null</argument>
      <argument type="service" id="logger" on-invalid="ignore"/>
      <deprecated package="6.4" version="symfony/messenger">The "%service_id%" service is deprecated, use the "Symfony\Component\Console\Command\SignalableCommandInterface" instead.</deprecated>
    </service>
    <service id="messenger.listener.stop_worker_on_stop_exception_listener" class="Symfony\Component\Messenger\EventListener\StopWorkerOnCustomStopExceptionListener">
      <tag name="kernel.event_subscriber"/>
    </service>
    <service id="messenger.listener.reset_services" class="Symfony\Component\Messenger\EventListener\ResetServicesListener">
      <argument type="service" id="services_resetter"/>
    </service>
    <service id="messenger.routable_message_bus" class="Symfony\Component\Messenger\RoutableMessageBus">
      <argument type="service" id=".service_locator.5cAhUFF"/>
      <argument type="service" id="messenger.bus.default"/>
    </service>
    <service id="messenger.redispatch_message_handler" class="Symfony\Component\Messenger\Handler\RedispatchMessageHandler">
      <tag name="messenger.message_handler"/>
      <argument type="service" id="messenger.bus.default"/>
    </service>
    <service id="messenger.bus.default" class="Symfony\Component\Messenger\MessageBus">
      <tag name="messenger.bus"/>
      <argument type="iterator">
        <argument type="service" id="messenger.bus.default.middleware.traceable"/>
        <argument type="service" id="messenger.bus.default.middleware.add_bus_name_stamp_middleware"/>
        <argument type="service" id="messenger.middleware.reject_redelivered_message_middleware"/>
        <argument type="service" id="messenger.middleware.dispatch_after_current_bus"/>
        <argument type="service" id="messenger.middleware.failed_message_processing_middleware"/>
        <argument type="service" id="messenger.bus.default.middleware.send_message"/>
        <argument type="service" id="messenger.bus.default.middleware.handle_message"/>
      </argument>
    </service>
    <service id="maker.file_manager" class="Symfony\Bundle\MakerBundle\FileManager">
      <argument type="service" id="filesystem"/>
      <argument type="service" id="maker.autoloader_util"/>
      <argument type="service" id="maker.file_link_formatter"/>
      <argument>/mnt/d/Study/vhosts-php/ecommerce/ms/Seller</argument>
      <argument>null</argument>
    </service>
    <service id="maker.autoloader_finder" class="Symfony\Bundle\MakerBundle\Util\ComposerAutoloaderFinder">
      <argument>App</argument>
    </service>
    <service id="maker.autoloader_util" class="Symfony\Bundle\MakerBundle\Util\AutoloaderUtil">
      <argument type="service" id="maker.autoloader_finder"/>
    </service>
    <service id="maker.file_link_formatter" class="Symfony\Bundle\MakerBundle\Util\MakerFileLinkFormatter">
      <argument type="service" id="debug.file_link_formatter" on-invalid="ignore"/>
    </service>
    <service id="maker.event_registry" class="Symfony\Bundle\MakerBundle\EventRegistry">
      <argument type="service" id="debug.event_dispatcher"/>
    </service>
    <service id="maker.console_error_listener" class="Symfony\Bundle\MakerBundle\Event\ConsoleErrorSubscriber">
      <tag name="kernel.event_subscriber"/>
      <tag name="container.no_preload"/>
    </service>
    <service id="maker.doctrine_helper" class="Symfony\Bundle\MakerBundle\Doctrine\DoctrineHelper">
      <argument>App\Entity</argument>
      <argument>null</argument>
    </service>
    <service id="maker.template_linter" class="Symfony\Bundle\MakerBundle\Util\TemplateLinter">
      <argument>%env(default::string:MAKER_PHP_CS_FIXER_BINARY_PATH)%</argument>
      <argument>%env(default::string:MAKER_PHP_CS_FIXER_CONFIG_PATH)%</argument>
    </service>
    <service id="maker.auto_command.abstract" class="Symfony\Bundle\MakerBundle\Command\MakerCommand" abstract="true">
      <argument></argument>
      <argument type="service" id="maker.file_manager"/>
      <argument type="service" id="maker.generator"/>
      <argument type="service" id="maker.template_linter"/>
    </service>
    <service id="maker.generator" class="Symfony\Bundle\MakerBundle\Generator">
      <argument type="service" id="maker.file_manager"/>
      <argument>App</argument>
      <argument>null</argument>
      <argument type="service" id="maker.template_component_generator"/>
    </service>
    <service id="maker.entity_class_generator" class="Symfony\Bundle\MakerBundle\Doctrine\EntityClassGenerator">
      <argument type="service" id="maker.generator"/>
      <argument type="service" id="maker.doctrine_helper"/>
    </service>
    <service id="maker.user_class_builder" class="Symfony\Bundle\MakerBundle\Security\UserClassBuilder"/>
    <service id="maker.security_config_updater" class="Symfony\Bundle\MakerBundle\Security\SecurityConfigUpdater"/>
    <service id="maker.renderer.form_type_renderer" class="Symfony\Bundle\MakerBundle\Renderer\FormTypeRenderer">
      <argument type="service" id="maker.generator"/>
    </service>
    <service id="maker.security_controller_builder" class="Symfony\Bundle\MakerBundle\Security\SecurityControllerBuilder"/>
    <service id="maker.php_compat_util" class="Symfony\Bundle\MakerBundle\Util\PhpCompatUtil">
      <argument type="service" id="maker.file_manager"/>
    </service>
    <service id="maker.template_component_generator" class="Symfony\Bundle\MakerBundle\Util\TemplateComponentGenerator"/>
    <service id="maker.maker.make_authenticator" class="Symfony\Bundle\MakerBundle\Maker\MakeAuthenticator">
      <tag name="maker.command"/>
      <argument type="service" id="maker.file_manager"/>
      <argument type="service" id="maker.security_config_updater"/>
      <argument type="service" id="maker.generator"/>
      <argument type="service" id="maker.doctrine_helper"/>
      <argument type="service" id="maker.security_controller_builder"/>
    </service>
    <service id="maker.maker.make_command" class="Symfony\Bundle\MakerBundle\Maker\MakeCommand">
      <tag name="maker.command"/>
      <argument type="service" id="maker.php_compat_util"/>
    </service>
    <service id="maker.maker.make_twig_component" class="Symfony\Bundle\MakerBundle\Maker\MakeTwigComponent">
      <tag name="maker.command"/>
    </service>
    <service id="maker.maker.make_controller" class="Symfony\Bundle\MakerBundle\Maker\MakeController">
      <tag name="maker.command"/>
      <argument type="service" id="maker.php_compat_util"/>
    </service>
    <service id="maker.maker.make_crud" class="Symfony\Bundle\MakerBundle\Maker\MakeCrud">
      <tag name="maker.command"/>
      <argument type="service" id="maker.doctrine_helper"/>
      <argument type="service" id="maker.renderer.form_type_renderer"/>
    </service>
    <service id="maker.maker.make_docker_database" class="Symfony\Bundle\MakerBundle\Maker\MakeDockerDatabase">
      <tag name="maker.command"/>
      <argument type="service" id="maker.file_manager"/>
    </service>
    <service id="maker.maker.make_entity" class="Symfony\Bundle\MakerBundle\Maker\MakeEntity">
      <tag name="maker.command"/>
      <argument type="service" id="maker.file_manager"/>
      <argument type="service" id="maker.doctrine_helper"/>
      <argument>null</argument>
      <argument type="service" id="maker.generator"/>
      <argument type="service" id="maker.entity_class_generator"/>
      <argument type="service" id="maker.php_compat_util"/>
    </service>
    <service id="maker.maker.make_fixtures" class="Symfony\Bundle\MakerBundle\Maker\MakeFixtures">
      <tag name="maker.command"/>
    </service>
    <service id="maker.maker.make_form" class="Symfony\Bundle\MakerBundle\Maker\MakeForm">
      <tag name="maker.command"/>
      <argument type="service" id="maker.doctrine_helper"/>
      <argument type="service" id="maker.renderer.form_type_renderer"/>
    </service>
    <service id="maker.maker.make_functional_test" class="Symfony\Bundle\MakerBundle\Maker\MakeFunctionalTest">
      <tag name="maker.command"/>
      <deprecated package="symfony/maker-bundle" version="1.29">The "%service_id%" service is deprecated, use "maker.maker.make_test" instead.</deprecated>
    </service>
    <service id="maker.maker.make_listener" class="Symfony\Bundle\MakerBundle\Maker\MakeListener">
      <tag name="maker.command"/>
      <argument type="service" id="maker.event_registry"/>
    </service>
    <service id="maker.maker.make_message" class="Symfony\Bundle\MakerBundle\Maker\MakeMessage">
      <tag name="maker.command"/>
      <argument type="service" id="maker.file_manager"/>
    </service>
    <service id="maker.maker.make_messenger_middleware" class="Symfony\Bundle\MakerBundle\Maker\MakeMessengerMiddleware">
      <tag name="maker.command"/>
    </service>
    <service id="maker.maker.make_registration_form" class="Symfony\Bundle\MakerBundle\Maker\MakeRegistrationForm">
      <tag name="maker.command"/>
      <argument type="service" id="maker.file_manager"/>
      <argument type="service" id="maker.renderer.form_type_renderer"/>
      <argument type="service" id="maker.doctrine_helper"/>
      <argument type="service" id="router.default" on-invalid="ignore"/>
    </service>
    <service id="maker.maker.make_reset_password" class="Symfony\Bundle\MakerBundle\Maker\MakeResetPassword">
      <tag name="maker.command"/>
      <argument type="service" id="maker.file_manager"/>
      <argument type="service" id="maker.doctrine_helper"/>
      <argument type="service" id="maker.entity_class_generator"/>
    </service>
    <service id="maker.maker.make_serializer_encoder" class="Symfony\Bundle\MakerBundle\Maker\MakeSerializerEncoder">
      <tag name="maker.command"/>
    </service>
    <service id="maker.maker.make_serializer_normalizer" class="Symfony\Bundle\MakerBundle\Maker\MakeSerializerNormalizer">
      <tag name="maker.command"/>
    </service>
    <service id="maker.maker.make_subscriber" class="Symfony\Bundle\MakerBundle\Maker\MakeSubscriber">
      <tag name="maker.command"/>
      <argument type="service" id="maker.event_registry"/>
      <deprecated package="symfony/maker-bundle" version="1.51">The "%service_id%" service is deprecated, use "maker.maker.make_listener" instead.</deprecated>
    </service>
    <service id="maker.maker.make_twig_extension" class="Symfony\Bundle\MakerBundle\Maker\MakeTwigExtension">
      <tag name="maker.command"/>
    </service>
    <service id="maker.maker.make_test" class="Symfony\Bundle\MakerBundle\Maker\MakeTest">
      <tag name="maker.command"/>
    </service>
    <service id="maker.maker.make_unit_test" class="Symfony\Bundle\MakerBundle\Maker\MakeUnitTest">
      <tag name="maker.command"/>
      <deprecated package="symfony/maker-bundle" version="1.29">The "%service_id%" service is deprecated, use "maker.maker.make_test" instead.</deprecated>
    </service>
    <service id="maker.maker.make_validator" class="Symfony\Bundle\MakerBundle\Maker\MakeValidator">
      <tag name="maker.command"/>
    </service>
    <service id="maker.maker.make_voter" class="Symfony\Bundle\MakerBundle\Maker\MakeVoter">
      <tag name="maker.command"/>
    </service>
    <service id="maker.maker.make_user" class="Symfony\Bundle\MakerBundle\Maker\MakeUser">
      <tag name="maker.command"/>
      <argument type="service" id="maker.file_manager"/>
      <argument type="service" id="maker.user_class_builder"/>
      <argument type="service" id="maker.security_config_updater"/>
      <argument type="service" id="maker.entity_class_generator"/>
      <argument type="service" id="maker.doctrine_helper"/>
    </service>
    <service id="maker.maker.make_migration" class="Symfony\Bundle\MakerBundle\Maker\MakeMigration">
      <tag name="maker.command"/>
      <argument>/mnt/d/Study/vhosts-php/ecommerce/ms/Seller</argument>
      <argument type="service" id="maker.file_link_formatter"/>
    </service>
    <service id="maker.maker.make_stimulus_controller" class="Symfony\Bundle\MakerBundle\Maker\MakeStimulusController">
      <tag name="maker.command"/>
    </service>
    <service id="maker.maker.make_form_login" class="Symfony\Bundle\MakerBundle\Maker\Security\MakeFormLogin">
      <tag name="maker.command"/>
      <argument type="service" id="maker.file_manager"/>
      <argument type="service" id="maker.security_config_updater"/>
      <argument type="service" id="maker.security_controller_builder"/>
    </service>
    <service id=".instanceof.TyCode\Shared\Domain\Bus\Command\CommandHandler.0.TyCode\Seller\Product\Application\AddReview\AddReviewCommandHandler" class="TyCode\Seller\Product\Application\AddReview\AddReviewCommandHandler" autowire="true" abstract="true"/>
    <service id=".abstract.instanceof.TyCode\Seller\Product\Application\AddReview\AddReviewCommandHandler" class="TyCode\Seller\Product\Application\AddReview\AddReviewCommandHandler" autowire="true" autoconfigure="true" abstract="true"/>
    <service id=".instanceof.TyCode\Shared\Domain\Bus\Command\CommandHandler.0.TyCode\Seller\Product\Application\Create\CreateProductCommandHandler" class="TyCode\Seller\Product\Application\Create\CreateProductCommandHandler" autowire="true" abstract="true"/>
    <service id=".abstract.instanceof.TyCode\Seller\Product\Application\Create\CreateProductCommandHandler" class="TyCode\Seller\Product\Application\Create\CreateProductCommandHandler" autowire="true" autoconfigure="true" abstract="true"/>
    <service id=".instanceof.TyCode\Shared\Domain\Bus\Query\QueryHandler.0.TyCode\Seller\Product\Application\FindAll\FindProductsQueryHandler" class="TyCode\Seller\Product\Application\FindAll\FindProductsQueryHandler" autowire="true" abstract="true"/>
    <service id=".abstract.instanceof.TyCode\Seller\Product\Application\FindAll\FindProductsQueryHandler" class="TyCode\Seller\Product\Application\FindAll\FindProductsQueryHandler" autowire="true" autoconfigure="true" abstract="true"/>
    <service id=".instanceof.TyCode\Shared\Domain\Bus\Query\QueryHandler.0.TyCode\Seller\Product\Application\FindByCriteria\FindProductByCriteriaQueryHandler" class="TyCode\Seller\Product\Application\FindByCriteria\FindProductByCriteriaQueryHandler" autowire="true" abstract="true"/>
    <service id=".abstract.instanceof.TyCode\Seller\Product\Application\FindByCriteria\FindProductByCriteriaQueryHandler" class="TyCode\Seller\Product\Application\FindByCriteria\FindProductByCriteriaQueryHandler" autowire="true" autoconfigure="true" abstract="true"/>
    <service id=".instanceof.TyCode\Shared\Domain\Bus\Query\QueryHandler.0.TyCode\Seller\Product\Application\FindById\FindProductQueryHandler" class="TyCode\Seller\Product\Application\FindById\FindProductQueryHandler" autowire="true" abstract="true"/>
    <service id=".abstract.instanceof.TyCode\Seller\Product\Application\FindById\FindProductQueryHandler" class="TyCode\Seller\Product\Application\FindById\FindProductQueryHandler" autowire="true" autoconfigure="true" abstract="true"/>
    <service id=".instanceof.TyCode\Shared\Domain\Bus\Event\EventSubscriber.0.TyCode\Seller\Product\Application\Subscriber\CreatedProductOn" class="TyCode\Seller\Product\Application\Subscriber\CreatedProductOn" autowire="true" abstract="true"/>
    <service id=".abstract.instanceof.TyCode\Seller\Product\Application\Subscriber\CreatedProductOn" class="TyCode\Seller\Product\Application\Subscriber\CreatedProductOn" autowire="true" autoconfigure="true" abstract="true"/>
    <service id=".instanceof.TyCode\Shared\Domain\Bus\Event\EventSubscriber.0.TyCode\Seller\Product\Application\Subscriber\DeliveredReviewOn" class="TyCode\Seller\Product\Application\Subscriber\DeliveredReviewOn" autowire="true" abstract="true"/>
    <service id=".abstract.instanceof.TyCode\Seller\Product\Application\Subscriber\DeliveredReviewOn" class="TyCode\Seller\Product\Application\Subscriber\DeliveredReviewOn" autowire="true" autoconfigure="true" abstract="true"/>
    <service id=".instanceof.TyCode\Shared\Domain\Bus\Command\CommandHandler.0.TyCode\Seller\Review\Application\Create\CreateReviewCommandHandler" class="TyCode\Seller\Review\Application\Create\CreateReviewCommandHandler" autowire="true" abstract="true"/>
    <service id=".abstract.instanceof.TyCode\Seller\Review\Application\Create\CreateReviewCommandHandler" class="TyCode\Seller\Review\Application\Create\CreateReviewCommandHandler" autowire="true" autoconfigure="true" abstract="true"/>
    <service id=".instanceof.Symfony\Component\Console\Command\Command.0.TyCode\Seller\Review\Infrastructure\Cli\RabbitMq\ConfigureRabbitMqCommand" class="TyCode\Seller\Review\Infrastructure\Cli\RabbitMq\ConfigureRabbitMqCommand" autowire="true" abstract="true"/>
    <service id=".abstract.instanceof.TyCode\Seller\Review\Infrastructure\Cli\RabbitMq\ConfigureRabbitMqCommand" class="TyCode\Seller\Review\Infrastructure\Cli\RabbitMq\ConfigureRabbitMqCommand" autowire="true" autoconfigure="true" abstract="true"/>
    <service id=".instanceof.Symfony\Component\Console\Command\Command.0.TyCode\Seller\Review\Infrastructure\Cli\RabbitMq\ConsumeRabbitMqEventsCommand" class="TyCode\Seller\Review\Infrastructure\Cli\RabbitMq\ConsumeRabbitMqEventsCommand" autowire="true" abstract="true"/>
    <service id=".abstract.instanceof.TyCode\Seller\Review\Infrastructure\Cli\RabbitMq\ConsumeRabbitMqEventsCommand" class="TyCode\Seller\Review\Infrastructure\Cli\RabbitMq\ConsumeRabbitMqEventsCommand" autowire="true" autoconfigure="true" abstract="true"/>
    <service id=".instanceof.Symfony\Component\Console\Command\Command.0.TyCode\Seller\Review\Infrastructure\Cli\RabbitMq\GenerateSupervisorRabbitMqConsumerFilesCommand" class="TyCode\Seller\Review\Infrastructure\Cli\RabbitMq\GenerateSupervisorRabbitMqConsumerFilesCommand" autowire="true" abstract="true"/>
    <service id=".abstract.instanceof.TyCode\Seller\Review\Infrastructure\Cli\RabbitMq\GenerateSupervisorRabbitMqConsumerFilesCommand" class="TyCode\Seller\Review\Infrastructure\Cli\RabbitMq\GenerateSupervisorRabbitMqConsumerFilesCommand" autowire="true" autoconfigure="true" abstract="true"/>
    <service id=".service_locator.w7.f4fT" class="Symfony\Component\DependencyInjection\ServiceLocator">
      <tag name="container.service_locator"/>
      <argument type="collection">
        <argument key="base64" type="service_closure" id="container.env_var_processor"/>
        <argument key="bool" type="service_closure" id="container.env_var_processor"/>
        <argument key="const" type="service_closure" id="container.env_var_processor"/>
        <argument key="csv" type="service_closure" id="container.env_var_processor"/>
        <argument key="default" type="service_closure" id="container.env_var_processor"/>
        <argument key="defined" type="service_closure" id="container.env_var_processor"/>
        <argument key="enum" type="service_closure" id="container.env_var_processor"/>
        <argument key="file" type="service_closure" id="container.env_var_processor"/>
        <argument key="float" type="service_closure" id="container.env_var_processor"/>
        <argument key="int" type="service_closure" id="container.env_var_processor"/>
        <argument key="json" type="service_closure" id="container.env_var_processor"/>
        <argument key="key" type="service_closure" id="container.env_var_processor"/>
        <argument key="not" type="service_closure" id="container.env_var_processor"/>
        <argument key="query_string" type="service_closure" id="container.env_var_processor"/>
        <argument key="require" type="service_closure" id="container.env_var_processor"/>
        <argument key="resolve" type="service_closure" id="container.env_var_processor"/>
        <argument key="shuffle" type="service_closure" id="container.env_var_processor"/>
        <argument key="string" type="service_closure" id="container.env_var_processor"/>
        <argument key="trim" type="service_closure" id="container.env_var_processor"/>
        <argument key="url" type="service_closure" id="container.env_var_processor"/>
      </argument>
    </service>
    <service id="maker.auto_command.make_auth" class="Symfony\Bundle\MakerBundle\Command\MakerCommand">
      <tag name="console.command" command="make:auth" description="Create a Guard authenticator of different flavors"/>
      <tag name="container.no_preload"/>
      <argument type="service" id="maker.maker.make_authenticator"/>
      <argument type="service" id="maker.file_manager"/>
      <argument type="service" id="maker.generator"/>
      <argument type="service" id="maker.template_linter"/>
      <call method="setName">
        <argument>make:auth</argument>
      </call>
      <call method="setDescription">
        <argument>Create a Guard authenticator of different flavors</argument>
      </call>
    </service>
    <service id="maker.auto_command.make_command" class="Symfony\Bundle\MakerBundle\Command\MakerCommand">
      <tag name="console.command" command="make:command" description="Create a new console command class"/>
      <tag name="container.no_preload"/>
      <argument type="service" id="maker.maker.make_command"/>
      <argument type="service" id="maker.file_manager"/>
      <argument type="service" id="maker.generator"/>
      <argument type="service" id="maker.template_linter"/>
      <call method="setName">
        <argument>make:command</argument>
      </call>
      <call method="setDescription">
        <argument>Create a new console command class</argument>
      </call>
    </service>
    <service id="maker.auto_command.make_twig_component" class="Symfony\Bundle\MakerBundle\Command\MakerCommand">
      <tag name="console.command" command="make:twig-component" description="Create a twig (or live) component"/>
      <tag name="container.no_preload"/>
      <argument type="service" id="maker.maker.make_twig_component"/>
      <argument type="service" id="maker.file_manager"/>
      <argument type="service" id="maker.generator"/>
      <argument type="service" id="maker.template_linter"/>
      <call method="setName">
        <argument>make:twig-component</argument>
      </call>
      <call method="setDescription">
        <argument>Create a twig (or live) component</argument>
      </call>
    </service>
    <service id="maker.auto_command.make_controller" class="Symfony\Bundle\MakerBundle\Command\MakerCommand">
      <tag name="console.command" command="make:controller" description="Create a new controller class"/>
      <tag name="container.no_preload"/>
      <argument type="service" id="maker.maker.make_controller"/>
      <argument type="service" id="maker.file_manager"/>
      <argument type="service" id="maker.generator"/>
      <argument type="service" id="maker.template_linter"/>
      <call method="setName">
        <argument>make:controller</argument>
      </call>
      <call method="setDescription">
        <argument>Create a new controller class</argument>
      </call>
    </service>
    <service id="maker.auto_command.make_crud" class="Symfony\Bundle\MakerBundle\Command\MakerCommand">
      <tag name="console.command" command="make:crud" description="Create CRUD for Doctrine entity class"/>
      <tag name="container.no_preload"/>
      <argument type="service" id="maker.maker.make_crud"/>
      <argument type="service" id="maker.file_manager"/>
      <argument type="service" id="maker.generator"/>
      <argument type="service" id="maker.template_linter"/>
      <call method="setName">
        <argument>make:crud</argument>
      </call>
      <call method="setDescription">
        <argument>Create CRUD for Doctrine entity class</argument>
      </call>
    </service>
    <service id="maker.auto_command.make_docker_database" class="Symfony\Bundle\MakerBundle\Command\MakerCommand">
      <tag name="console.command" command="make:docker:database" description="Add a database container to your docker-compose.yaml file"/>
      <tag name="container.no_preload"/>
      <argument type="service" id="maker.maker.make_docker_database"/>
      <argument type="service" id="maker.file_manager"/>
      <argument type="service" id="maker.generator"/>
      <argument type="service" id="maker.template_linter"/>
      <call method="setName">
        <argument>make:docker:database</argument>
      </call>
      <call method="setDescription">
        <argument>Add a database container to your docker-compose.yaml file</argument>
      </call>
    </service>
    <service id="maker.auto_command.make_entity" class="Symfony\Bundle\MakerBundle\Command\MakerCommand">
      <tag name="console.command" command="make:entity" description="Create or update a Doctrine entity class, and optionally an API Platform resource"/>
      <tag name="container.no_preload"/>
      <argument type="service" id="maker.maker.make_entity"/>
      <argument type="service" id="maker.file_manager"/>
      <argument type="service" id="maker.generator"/>
      <argument type="service" id="maker.template_linter"/>
      <call method="setName">
        <argument>make:entity</argument>
      </call>
      <call method="setDescription">
        <argument>Create or update a Doctrine entity class, and optionally an API Platform resource</argument>
      </call>
    </service>
    <service id="maker.auto_command.make_fixtures" class="Symfony\Bundle\MakerBundle\Command\MakerCommand">
      <tag name="console.command" command="make:fixtures" description="Create a new class to load Doctrine fixtures"/>
      <tag name="container.no_preload"/>
      <argument type="service" id="maker.maker.make_fixtures"/>
      <argument type="service" id="maker.file_manager"/>
      <argument type="service" id="maker.generator"/>
      <argument type="service" id="maker.template_linter"/>
      <call method="setName">
        <argument>make:fixtures</argument>
      </call>
      <call method="setDescription">
        <argument>Create a new class to load Doctrine fixtures</argument>
      </call>
    </service>
    <service id="maker.auto_command.make_form" class="Symfony\Bundle\MakerBundle\Command\MakerCommand">
      <tag name="console.command" command="make:form" description="Create a new form class"/>
      <tag name="container.no_preload"/>
      <argument type="service" id="maker.maker.make_form"/>
      <argument type="service" id="maker.file_manager"/>
      <argument type="service" id="maker.generator"/>
      <argument type="service" id="maker.template_linter"/>
      <call method="setName">
        <argument>make:form</argument>
      </call>
      <call method="setDescription">
        <argument>Create a new form class</argument>
      </call>
    </service>
    <service id="maker.auto_command.make_listener" class="Symfony\Bundle\MakerBundle\Command\MakerCommand">
      <tag name="console.command" command="make:listener" description="Creates a new event subscriber class or a new event listener class"/>
      <tag name="console.command" command="make:subscriber" description="Deprecated alias of &quot;make:listener&quot;"/>
      <tag name="container.no_preload"/>
      <argument type="service" id="maker.maker.make_listener"/>
      <argument type="service" id="maker.file_manager"/>
      <argument type="service" id="maker.generator"/>
      <argument type="service" id="maker.template_linter"/>
      <call method="setName">
        <argument>make:listener</argument>
      </call>
      <call method="setAliases">
        <argument type="collection">
          <argument>make:subscriber</argument>
        </argument>
      </call>
      <call method="setDescription">
        <argument>Creates a new event subscriber class or a new event listener class</argument>
      </call>
    </service>
    <service id="maker.auto_command.make_message" class="Symfony\Bundle\MakerBundle\Command\MakerCommand">
      <tag name="console.command" command="make:message" description="Create a new message and handler"/>
      <tag name="container.no_preload"/>
      <argument type="service" id="maker.maker.make_message"/>
      <argument type="service" id="maker.file_manager"/>
      <argument type="service" id="maker.generator"/>
      <argument type="service" id="maker.template_linter"/>
      <call method="setName">
        <argument>make:message</argument>
      </call>
      <call method="setDescription">
        <argument>Create a new message and handler</argument>
      </call>
    </service>
    <service id="maker.auto_command.make_messenger_middleware" class="Symfony\Bundle\MakerBundle\Command\MakerCommand">
      <tag name="console.command" command="make:messenger-middleware" description="Create a new messenger middleware"/>
      <tag name="container.no_preload"/>
      <argument type="service" id="maker.maker.make_messenger_middleware"/>
      <argument type="service" id="maker.file_manager"/>
      <argument type="service" id="maker.generator"/>
      <argument type="service" id="maker.template_linter"/>
      <call method="setName">
        <argument>make:messenger-middleware</argument>
      </call>
      <call method="setDescription">
        <argument>Create a new messenger middleware</argument>
      </call>
    </service>
    <service id="maker.auto_command.make_registration_form" class="Symfony\Bundle\MakerBundle\Command\MakerCommand">
      <tag name="console.command" command="make:registration-form" description="Create a new registration form system"/>
      <tag name="container.no_preload"/>
      <argument type="service" id="maker.maker.make_registration_form"/>
      <argument type="service" id="maker.file_manager"/>
      <argument type="service" id="maker.generator"/>
      <argument type="service" id="maker.template_linter"/>
      <call method="setName">
        <argument>make:registration-form</argument>
      </call>
      <call method="setDescription">
        <argument>Create a new registration form system</argument>
      </call>
    </service>
    <service id="maker.auto_command.make_reset_password" class="Symfony\Bundle\MakerBundle\Command\MakerCommand">
      <tag name="console.command" command="make:reset-password" description="Create controller, entity, and repositories for use with symfonycasts/reset-password-bundle"/>
      <tag name="container.no_preload"/>
      <argument type="service" id="maker.maker.make_reset_password"/>
      <argument type="service" id="maker.file_manager"/>
      <argument type="service" id="maker.generator"/>
      <argument type="service" id="maker.template_linter"/>
      <call method="setName">
        <argument>make:reset-password</argument>
      </call>
      <call method="setDescription">
        <argument>Create controller, entity, and repositories for use with symfonycasts/reset-password-bundle</argument>
      </call>
    </service>
    <service id="maker.auto_command.make_serializer_encoder" class="Symfony\Bundle\MakerBundle\Command\MakerCommand">
      <tag name="console.command" command="make:serializer:encoder" description="Create a new serializer encoder class"/>
      <tag name="container.no_preload"/>
      <argument type="service" id="maker.maker.make_serializer_encoder"/>
      <argument type="service" id="maker.file_manager"/>
      <argument type="service" id="maker.generator"/>
      <argument type="service" id="maker.template_linter"/>
      <call method="setName">
        <argument>make:serializer:encoder</argument>
      </call>
      <call method="setDescription">
        <argument>Create a new serializer encoder class</argument>
      </call>
    </service>
    <service id="maker.auto_command.make_serializer_normalizer" class="Symfony\Bundle\MakerBundle\Command\MakerCommand">
      <tag name="console.command" command="make:serializer:normalizer" description="Create a new serializer normalizer class"/>
      <tag name="container.no_preload"/>
      <argument type="service" id="maker.maker.make_serializer_normalizer"/>
      <argument type="service" id="maker.file_manager"/>
      <argument type="service" id="maker.generator"/>
      <argument type="service" id="maker.template_linter"/>
      <call method="setName">
        <argument>make:serializer:normalizer</argument>
      </call>
      <call method="setDescription">
        <argument>Create a new serializer normalizer class</argument>
      </call>
    </service>
    <service id="maker.auto_command.make_twig_extension" class="Symfony\Bundle\MakerBundle\Command\MakerCommand">
      <tag name="console.command" command="make:twig-extension" description="Create a new Twig extension with its runtime class"/>
      <tag name="container.no_preload"/>
      <argument type="service" id="maker.maker.make_twig_extension"/>
      <argument type="service" id="maker.file_manager"/>
      <argument type="service" id="maker.generator"/>
      <argument type="service" id="maker.template_linter"/>
      <call method="setName">
        <argument>make:twig-extension</argument>
      </call>
      <call method="setDescription">
        <argument>Create a new Twig extension with its runtime class</argument>
      </call>
    </service>
    <service id="maker.auto_command.make_test" class="Symfony\Bundle\MakerBundle\Command\MakerCommand">
      <tag name="console.command" command="make:test" description="Create a new test class"/>
      <tag name="console.command" command="make:unit-test" description="Deprecated alias of &quot;make:test&quot;"/>
      <tag name="console.command" command="make:functional-test" description="Deprecated alias of &quot;make:test&quot;"/>
      <tag name="container.no_preload"/>
      <argument type="service" id="maker.maker.make_test"/>
      <argument type="service" id="maker.file_manager"/>
      <argument type="service" id="maker.generator"/>
      <argument type="service" id="maker.template_linter"/>
      <call method="setName">
        <argument>make:test</argument>
      </call>
      <call method="setAliases">
        <argument type="collection">
          <argument>make:unit-test</argument>
          <argument>make:functional-test</argument>
        </argument>
      </call>
      <call method="setDescription">
        <argument>Create a new test class</argument>
      </call>
    </service>
    <service id="maker.auto_command.make_validator" class="Symfony\Bundle\MakerBundle\Command\MakerCommand">
      <tag name="console.command" command="make:validator" description="Create a new validator and constraint class"/>
      <tag name="container.no_preload"/>
      <argument type="service" id="maker.maker.make_validator"/>
      <argument type="service" id="maker.file_manager"/>
      <argument type="service" id="maker.generator"/>
      <argument type="service" id="maker.template_linter"/>
      <call method="setName">
        <argument>make:validator</argument>
      </call>
      <call method="setDescription">
        <argument>Create a new validator and constraint class</argument>
      </call>
    </service>
    <service id="maker.auto_command.make_voter" class="Symfony\Bundle\MakerBundle\Command\MakerCommand">
      <tag name="console.command" command="make:voter" description="Create a new security voter class"/>
      <tag name="container.no_preload"/>
      <argument type="service" id="maker.maker.make_voter"/>
      <argument type="service" id="maker.file_manager"/>
      <argument type="service" id="maker.generator"/>
      <argument type="service" id="maker.template_linter"/>
      <call method="setName">
        <argument>make:voter</argument>
      </call>
      <call method="setDescription">
        <argument>Create a new security voter class</argument>
      </call>
    </service>
    <service id="maker.auto_command.make_user" class="Symfony\Bundle\MakerBundle\Command\MakerCommand">
      <tag name="console.command" command="make:user" description="Create a new security user class"/>
      <tag name="container.no_preload"/>
      <argument type="service" id="maker.maker.make_user"/>
      <argument type="service" id="maker.file_manager"/>
      <argument type="service" id="maker.generator"/>
      <argument type="service" id="maker.template_linter"/>
      <call method="setName">
        <argument>make:user</argument>
      </call>
      <call method="setDescription">
        <argument>Create a new security user class</argument>
      </call>
    </service>
    <service id="maker.auto_command.make_migration" class="Symfony\Bundle\MakerBundle\Command\MakerCommand">
      <tag name="console.command" command="make:migration" description="Create a new migration based on database changes"/>
      <tag name="container.no_preload"/>
      <argument type="service" id="maker.maker.make_migration"/>
      <argument type="service" id="maker.file_manager"/>
      <argument type="service" id="maker.generator"/>
      <argument type="service" id="maker.template_linter"/>
      <call method="setName">
        <argument>make:migration</argument>
      </call>
      <call method="setDescription">
        <argument>Create a new migration based on database changes</argument>
      </call>
    </service>
    <service id="maker.auto_command.make_stimulus_controller" class="Symfony\Bundle\MakerBundle\Command\MakerCommand">
      <tag name="console.command" command="make:stimulus-controller" description="Create a new Stimulus controller"/>
      <tag name="container.no_preload"/>
      <argument type="service" id="maker.maker.make_stimulus_controller"/>
      <argument type="service" id="maker.file_manager"/>
      <argument type="service" id="maker.generator"/>
      <argument type="service" id="maker.template_linter"/>
      <call method="setName">
        <argument>make:stimulus-controller</argument>
      </call>
      <call method="setDescription">
        <argument>Create a new Stimulus controller</argument>
      </call>
    </service>
    <service id="maker.auto_command.make_security_form_login" class="Symfony\Bundle\MakerBundle\Command\MakerCommand">
      <tag name="console.command" command="make:security:form-login" description="Generate the code needed for the form_login authenticator"/>
      <tag name="container.no_preload"/>
      <argument type="service" id="maker.maker.make_form_login"/>
      <argument type="service" id="maker.file_manager"/>
      <argument type="service" id="maker.generator"/>
      <argument type="service" id="maker.template_linter"/>
      <call method="setName">
        <argument>make:security:form-login</argument>
      </call>
      <call method="setDescription">
        <argument>Generate the code needed for the form_login authenticator</argument>
      </call>
    </service>
    <service id=".service_locator.y4_Zrx." class="Symfony\Component\DependencyInjection\ServiceLocator">
      <tag name="container.service_locator"/>
      <argument type="collection">
        <argument key="loader" type="service_closure" id=".errored..service_locator.y4_Zrx..Symfony\Component\Config\Loader\LoaderInterface"/>
      </argument>
    </service>
    <service id=".service_locator.EgMTexf" class="Symfony\Component\DependencyInjection\ServiceLocator">
      <tag name="container.service_locator"/>
      <argument type="collection">
        <argument key="queryBus" type="service_closure" id="TyCode\Shared\Infrastructure\Bus\Query\SymfonyMessageQueryBus"/>
      </argument>
    </service>
    <service id=".service_locator.6rQKJLZ" class="Symfony\Component\DependencyInjection\ServiceLocator">
      <tag name="container.service_locator"/>
      <argument type="collection"/>
    </service>
    <service id=".service_locator.lwNoDbx" class="Symfony\Component\DependencyInjection\ServiceLocator">
      <tag name="container.service_locator"/>
      <argument type="collection">
        <argument key="commandBus" type="service_closure" id="TyCode\Shared\Infrastructure\Bus\Command\SymfonyMessageCommandBus"/>
      </argument>
    </service>
    <service id=".service_locator.Zbeqssn" class="Symfony\Component\DependencyInjection\ServiceLocator">
      <tag name="container.service_locator"/>
      <argument type="collection">
        <argument key="TyCode\Seller\Product\Infrastructure\Web\GetProduct::__invoke" type="service_closure" id=".service_locator.EgMTexf"/>
        <argument key="TyCode\Seller\Product\Infrastructure\Web\GetProductByCriteria::__invoke" type="service_closure" id=".service_locator.EgMTexf"/>
        <argument key="TyCode\Seller\Product\Infrastructure\Web\GetProducts::__invoke" type="service_closure" id=".service_locator.EgMTexf"/>
        <argument key="TyCode\Seller\Review\Infrastructure\Web\PostReviewCreate::__invoke" type="service_closure" id=".service_locator.lwNoDbx"/>
        <argument key="kernel::loadRoutes" type="service_closure" id=".service_locator.y4_Zrx."/>
        <argument key="kernel::registerContainerConfiguration" type="service_closure" id=".service_locator.y4_Zrx."/>
        <argument key="TyCode\Seller\Product\Infrastructure\Web\GetProduct:__invoke" type="service_closure" id=".service_locator.EgMTexf"/>
        <argument key="TyCode\Seller\Product\Infrastructure\Web\GetProduct" type="service_closure" id=".service_locator.EgMTexf"/>
        <argument key="TyCode\Seller\Product\Infrastructure\Web\GetProductByCriteria:__invoke" type="service_closure" id=".service_locator.EgMTexf"/>
        <argument key="TyCode\Seller\Product\Infrastructure\Web\GetProductByCriteria" type="service_closure" id=".service_locator.EgMTexf"/>
        <argument key="TyCode\Seller\Product\Infrastructure\Web\GetProducts:__invoke" type="service_closure" id=".service_locator.EgMTexf"/>
        <argument key="TyCode\Seller\Product\Infrastructure\Web\GetProducts" type="service_closure" id=".service_locator.EgMTexf"/>
        <argument key="TyCode\Seller\Review\Infrastructure\Web\PostReviewCreate:__invoke" type="service_closure" id=".service_locator.lwNoDbx"/>
        <argument key="TyCode\Seller\Review\Infrastructure\Web\PostReviewCreate" type="service_closure" id=".service_locator.lwNoDbx"/>
        <argument key="kernel:loadRoutes" type="service_closure" id=".service_locator.y4_Zrx."/>
        <argument key="kernel:registerContainerConfiguration" type="service_closure" id=".service_locator.y4_Zrx."/>
      </argument>
    </service>
    <service id=".service_locator.lLv4pWF" class="Symfony\Component\DependencyInjection\ServiceLocator">
      <tag name="container.service_locator"/>
      <argument type="collection">
        <argument key="inline" type="service_closure" id="fragment.renderer.inline"/>
      </argument>
    </service>
    <service id=".debug.value_resolver.argument_resolver.backed_enum_resolver" class="Symfony\Component\HttpKernel\Controller\ArgumentResolver\TraceableValueResolver">
      <argument type="service" id="argument_resolver.backed_enum_resolver"/>
      <argument type="service" id="debug.stopwatch"/>
    </service>
    <service id=".debug.value_resolver.argument_resolver.datetime" class="Symfony\Component\HttpKernel\Controller\ArgumentResolver\TraceableValueResolver">
      <argument type="service" id="argument_resolver.datetime"/>
      <argument type="service" id="debug.stopwatch"/>
    </service>
    <service id=".debug.value_resolver.argument_resolver.request_attribute" class="Symfony\Component\HttpKernel\Controller\ArgumentResolver\TraceableValueResolver">
      <argument type="service" id="argument_resolver.request_attribute"/>
      <argument type="service" id="debug.stopwatch"/>
    </service>
    <service id=".debug.value_resolver.argument_resolver.request" class="Symfony\Component\HttpKernel\Controller\ArgumentResolver\TraceableValueResolver">
      <argument type="service" id="argument_resolver.request"/>
      <argument type="service" id="debug.stopwatch"/>
    </service>
    <service id=".debug.value_resolver.argument_resolver.session" class="Symfony\Component\HttpKernel\Controller\ArgumentResolver\TraceableValueResolver">
      <argument type="service" id="argument_resolver.session"/>
      <argument type="service" id="debug.stopwatch"/>
    </service>
    <service id=".debug.value_resolver.argument_resolver.service" class="Symfony\Component\HttpKernel\Controller\ArgumentResolver\TraceableValueResolver">
      <argument type="service" id="argument_resolver.service"/>
      <argument type="service" id="debug.stopwatch"/>
    </service>
    <service id=".debug.value_resolver.argument_resolver.default" class="Symfony\Component\HttpKernel\Controller\ArgumentResolver\TraceableValueResolver">
      <argument type="service" id="argument_resolver.default"/>
      <argument type="service" id="debug.stopwatch"/>
    </service>
    <service id=".debug.value_resolver.argument_resolver.variadic" class="Symfony\Component\HttpKernel\Controller\ArgumentResolver\TraceableValueResolver">
      <argument type="service" id="argument_resolver.variadic"/>
      <argument type="service" id="debug.stopwatch"/>
    </service>
    <service id=".debug.value_resolver.argument_resolver.not_tagged_controller" class="Symfony\Component\HttpKernel\Controller\ArgumentResolver\TraceableValueResolver">
      <argument type="service" id="argument_resolver.not_tagged_controller"/>
      <argument type="service" id="debug.stopwatch"/>
    </service>
    <service id=".debug.value_resolver.argument_resolver.request_payload" class="Symfony\Component\HttpKernel\Controller\ArgumentResolver\TraceableValueResolver">
      <argument type="service" id="argument_resolver.request_payload"/>
      <argument type="service" id="debug.stopwatch"/>
    </service>
    <service id=".debug.value_resolver.argument_resolver.query_parameter_value_resolver" class="Symfony\Component\HttpKernel\Controller\ArgumentResolver\TraceableValueResolver">
      <argument type="service" id="argument_resolver.query_parameter_value_resolver"/>
      <argument type="service" id="debug.stopwatch"/>
    </service>
    <service id="messenger.bus.default.middleware.traceable" class="Symfony\Component\Messenger\Middleware\TraceableMiddleware">
      <argument type="service" id="debug.stopwatch"/>
      <argument>messenger.bus.default</argument>
    </service>
    <service id="messenger.bus.default.middleware.add_bus_name_stamp_middleware" class="Symfony\Component\Messenger\Middleware\AddBusNameStampMiddleware">
      <argument>messenger.bus.default</argument>
    </service>
    <service id="messenger.bus.default.middleware.send_message" class="Symfony\Component\Messenger\Middleware\SendMessageMiddleware">
      <argument type="service" id="messenger.senders_locator"/>
      <argument type="service" id="debug.event_dispatcher"/>
      <argument>true</argument>
      <call method="setLogger">
        <argument type="service" id="logger" on-invalid="ignore"/>
      </call>
    </service>
    <service id="messenger.bus.default.middleware.handle_message" class="Symfony\Component\Messenger\Middleware\HandleMessageMiddleware">
      <argument type="service" id="messenger.bus.default.messenger.handlers_locator"/>
      <argument>false</argument>
      <call method="setLogger">
        <argument type="service" id="logger" on-invalid="ignore"/>
      </call>
    </service>
    <service id=".service_locator.5cAhUFF" class="Symfony\Component\DependencyInjection\ServiceLocator">
      <tag name="container.service_locator"/>
      <argument type="collection">
        <argument key="messenger.bus.default" type="service_closure" id="messenger.bus.default"/>
      </argument>
    </service>
    <service id=".messenger.handler_descriptor.QXXNQ9d" class="Symfony\Component\Messenger\Handler\HandlerDescriptor">
      <argument type="service" id="process.messenger.process_message_handler"/>
      <argument type="collection"/>
    </service>
    <service id=".messenger.handler_descriptor.kEzMhfs" class="Symfony\Component\Messenger\Handler\HandlerDescriptor">
      <argument type="service" id="console.messenger.execute_command_handler"/>
      <argument type="collection"/>
    </service>
    <service id=".messenger.handler_descriptor.p4Qvabm" class="Symfony\Component\Messenger\Handler\HandlerDescriptor">
      <argument type="service" id="messenger.redispatch_message_handler"/>
      <argument type="collection"/>
    </service>
    <service id="messenger.bus.default.messenger.handlers_locator" class="Symfony\Component\Messenger\Handler\HandlersLocator">
      <argument type="collection">
        <argument key="Symfony\Component\Process\Messenger\RunProcessMessage" type="iterator">
          <argument type="service" id=".messenger.handler_descriptor.QXXNQ9d"/>
        </argument>
        <argument key="Symfony\Component\Console\Messenger\RunCommandMessage" type="iterator">
          <argument type="service" id=".messenger.handler_descriptor.kEzMhfs"/>
        </argument>
        <argument key="Symfony\Component\Messenger\Message\RedispatchMessage" type="iterator">
          <argument type="service" id=".messenger.handler_descriptor.p4Qvabm"/>
        </argument>
      </argument>
    </service>
    <service id="logger" class="Symfony\Component\HttpKernel\Log\Logger">
      <argument>null</argument>
      <argument>null</argument>
      <argument>null</argument>
      <argument type="service" id="request_stack"/>
      <argument>%env(bool:default::key:web:default:kernel.runtime_mode:)%</argument>
    </service>
    <service id=".service_locator.PvoQzFT" class="Symfony\Component\DependencyInjection\ServiceLocator">
      <tag name="container.service_locator"/>
      <argument type="collection">
        <argument key="routing.loader" type="service_closure" id="routing.loader"/>
      </argument>
    </service>
    <service id=".service_locator.PvoQzFT.router.default" class="Symfony\Component\DependencyInjection\ServiceLocator">
      <tag name="container.service_locator_context" id="router.default"/>
      <argument>router.default</argument>
      <argument type="service" id="service_container"/>
      <factory service=".service_locator.PvoQzFT" method="withContext"/>
    </service>
    <service id=".service_locator.cUcW89y" class="Symfony\Component\DependencyInjection\ServiceLocator">
      <tag name="container.service_locator"/>
      <argument type="collection">
        <argument key="router" type="service_closure" id="router.default"/>
      </argument>
    </service>
    <service id=".service_locator.cUcW89y.router.cache_warmer" class="Symfony\Component\DependencyInjection\ServiceLocator">
      <tag name="container.service_locator_context" id="router.cache_warmer"/>
      <argument>router.cache_warmer</argument>
      <argument type="service" id="service_container"/>
      <factory service=".service_locator.cUcW89y" method="withContext"/>
    </service>
    <service id=".service_locator.M1u7FKz" class="Symfony\Component\DependencyInjection\ServiceLocator">
      <tag name="container.service_locator"/>
      <argument type="collection">
        <argument key="Symfony\Component\HttpKernel\Controller\ArgumentResolver\BackedEnumValueResolver" type="service_closure" id=".debug.value_resolver.argument_resolver.backed_enum_resolver"/>
        <argument key="Symfony\Component\HttpKernel\Controller\ArgumentResolver\DateTimeValueResolver" type="service_closure" id=".debug.value_resolver.argument_resolver.datetime"/>
        <argument key="Symfony\Component\HttpKernel\Controller\ArgumentResolver\DefaultValueResolver" type="service_closure" id=".debug.value_resolver.argument_resolver.default"/>
        <argument key="Symfony\Component\HttpKernel\Controller\ArgumentResolver\QueryParameterValueResolver" type="service_closure" id=".debug.value_resolver.argument_resolver.query_parameter_value_resolver"/>
        <argument key="Symfony\Component\HttpKernel\Controller\ArgumentResolver\RequestAttributeValueResolver" type="service_closure" id=".debug.value_resolver.argument_resolver.request_attribute"/>
        <argument key="Symfony\Component\HttpKernel\Controller\ArgumentResolver\RequestPayloadValueResolver" type="service_closure" id=".debug.value_resolver.argument_resolver.request_payload"/>
        <argument key="Symfony\Component\HttpKernel\Controller\ArgumentResolver\RequestValueResolver" type="service_closure" id=".debug.value_resolver.argument_resolver.request"/>
        <argument key="Symfony\Component\HttpKernel\Controller\ArgumentResolver\ServiceValueResolver" type="service_closure" id=".debug.value_resolver.argument_resolver.service"/>
        <argument key="Symfony\Component\HttpKernel\Controller\ArgumentResolver\SessionValueResolver" type="service_closure" id=".debug.value_resolver.argument_resolver.session"/>
        <argument key="Symfony\Component\HttpKernel\Controller\ArgumentResolver\VariadicValueResolver" type="service_closure" id=".debug.value_resolver.argument_resolver.variadic"/>
        <argument key="argument_resolver.not_tagged_controller" type="service_closure" id=".debug.value_resolver.argument_resolver.not_tagged_controller"/>
      </argument>
    </service>
    <service id=".service_locator.XXv1IfR" class="Symfony\Component\DependencyInjection\ServiceLocator">
      <tag name="container.service_locator"/>
      <argument type="collection">
        <argument key="reverse_container" type="service_closure" id="reverse_container" on-invalid="ignore_uninitialized"/>
      </argument>
    </service>
    <service id=".service_locator.NBUFN6A" class="Symfony\Component\DependencyInjection\ServiceLocator">
      <tag name="container.service_locator"/>
      <argument type="collection">
        <argument key="cache.app" type="service_closure" id="cache.app.taggable"/>
      </argument>
    </service>
    <service id=".service_locator.9ETxUxh" class="Symfony\Component\DependencyInjection\ServiceLocator">
      <tag name="container.service_locator"/>
      <argument type="collection">
        <argument key="event_dispatcher" type="service_closure" id="debug.event_dispatcher"/>
      </argument>
    </service>
    <service id=".service_locator.l_Ngom6" class="Symfony\Component\DependencyInjection\ServiceLocator">
      <tag name="container.service_locator"/>
      <argument type="collection">
        <argument key="kernel" type="service_closure" id="kernel"/>
      </argument>
    </service>
    <service id=".service_locator.cXsfP3P" class="Symfony\Component\DependencyInjection\ServiceLocator">
      <tag name="container.service_locator"/>
      <argument type="collection">
        <argument key="logger" type="service_closure" id="logger" on-invalid="ignore"/>
        <argument key="session_factory" type="service_closure" id="session.factory" on-invalid="ignore"/>
      </argument>
    </service>
    <service id="debug.event_dispatcher.inner" class="Symfony\Component\EventDispatcher\EventDispatcher"/>
    <service id="debug.controller_resolver.inner" class="Symfony\Bundle\FrameworkBundle\Controller\ControllerResolver">
      <argument type="service" id="service_container"/>
      <argument type="service" id="logger" on-invalid="ignore"/>
      <call method="allowControllers">
        <argument type="collection">
          <argument>Symfony\Bundle\FrameworkBundle\Controller\AbstractController</argument>
          <argument>Symfony\Bundle\FrameworkBundle\Controller\TemplateController</argument>
        </argument>
      </call>
    </service>
    <service id="debug.argument_resolver.inner" class="Symfony\Component\HttpKernel\Controller\ArgumentResolver">
      <argument type="service" id="argument_metadata_factory"/>
      <argument type="iterator">
        <argument type="service" id=".debug.value_resolver.argument_resolver.backed_enum_resolver"/>
        <argument type="service" id=".debug.value_resolver.argument_resolver.datetime"/>
        <argument type="service" id=".debug.value_resolver.argument_resolver.request_attribute"/>
        <argument type="service" id=".debug.value_resolver.argument_resolver.request"/>
        <argument type="service" id=".debug.value_resolver.argument_resolver.session"/>
        <argument type="service" id=".debug.value_resolver.argument_resolver.service"/>
        <argument type="service" id=".debug.value_resolver.argument_resolver.default"/>
        <argument type="service" id=".debug.value_resolver.argument_resolver.variadic"/>
        <argument type="service" id=".debug.value_resolver.argument_resolver.not_tagged_controller"/>
      </argument>
      <argument type="service" id=".service_locator.M1u7FKz"/>
    </service>
    <service id=".errored..service_locator.y4_Zrx..Symfony\Component\Config\Loader\LoaderInterface" class="Symfony\Component\Config\Loader\LoaderInterface">
      <tag name="container.error" message="Cannot autowire service &quot;.service_locator.y4_Zrx.&quot;: it needs an instance of &quot;Symfony\Component\Config\Loader\LoaderInterface&quot; but this type has been excluded from autowiring."/>
    </service>
    <service id=".console.command.about.lazy" class="Symfony\Component\Console\Command\LazyCommand">
      <argument>about</argument>
      <argument type="collection"/>
      <argument>Display information about the current project</argument>
      <argument>false</argument>
      <argument type="service_closure" id="console.command.about"/>
    </service>
    <service id=".console.command.assets_install.lazy" class="Symfony\Component\Console\Command\LazyCommand">
      <argument>assets:install</argument>
      <argument type="collection"/>
      <argument>Install bundle's web assets under a public directory</argument>
      <argument>false</argument>
      <argument type="service_closure" id="console.command.assets_install"/>
    </service>
    <service id=".console.command.cache_clear.lazy" class="Symfony\Component\Console\Command\LazyCommand">
      <argument>cache:clear</argument>
      <argument type="collection"/>
      <argument>Clear the cache</argument>
      <argument>false</argument>
      <argument type="service_closure" id="console.command.cache_clear"/>
    </service>
    <service id=".console.command.cache_pool_clear.lazy" class="Symfony\Component\Console\Command\LazyCommand">
      <argument>cache:pool:clear</argument>
      <argument type="collection"/>
      <argument>Clear cache pools</argument>
      <argument>false</argument>
      <argument type="service_closure" id="console.command.cache_pool_clear"/>
    </service>
    <service id=".console.command.cache_pool_prune.lazy" class="Symfony\Component\Console\Command\LazyCommand">
      <argument>cache:pool:prune</argument>
      <argument type="collection"/>
      <argument>Prune cache pools</argument>
      <argument>false</argument>
      <argument type="service_closure" id="console.command.cache_pool_prune"/>
    </service>
    <service id=".console.command.cache_pool_invalidate_tags.lazy" class="Symfony\Component\Console\Command\LazyCommand">
      <argument>cache:pool:invalidate-tags</argument>
      <argument type="collection"/>
      <argument>Invalidate cache tags for all or a specific pool</argument>
      <argument>false</argument>
      <argument type="service_closure" id="console.command.cache_pool_invalidate_tags"/>
    </service>
    <service id=".console.command.cache_pool_delete.lazy" class="Symfony\Component\Console\Command\LazyCommand">
      <argument>cache:pool:delete</argument>
      <argument type="collection"/>
      <argument>Delete an item from a cache pool</argument>
      <argument>false</argument>
      <argument type="service_closure" id="console.command.cache_pool_delete"/>
    </service>
    <service id=".console.command.cache_pool_list.lazy" class="Symfony\Component\Console\Command\LazyCommand">
      <argument>cache:pool:list</argument>
      <argument type="collection"/>
      <argument>List available cache pools</argument>
      <argument>false</argument>
      <argument type="service_closure" id="console.command.cache_pool_list"/>
    </service>
    <service id=".console.command.cache_warmup.lazy" class="Symfony\Component\Console\Command\LazyCommand">
      <argument>cache:warmup</argument>
      <argument type="collection"/>
      <argument>Warm up an empty cache</argument>
      <argument>false</argument>
      <argument type="service_closure" id="console.command.cache_warmup"/>
    </service>
    <service id=".console.command.config_debug.lazy" class="Symfony\Component\Console\Command\LazyCommand">
      <argument>debug:config</argument>
      <argument type="collection"/>
      <argument>Dump the current configuration for an extension</argument>
      <argument>false</argument>
      <argument type="service_closure" id="console.command.config_debug"/>
    </service>
    <service id=".console.command.config_dump_reference.lazy" class="Symfony\Component\Console\Command\LazyCommand">
      <argument>config:dump-reference</argument>
      <argument type="collection"/>
      <argument>Dump the default configuration for an extension</argument>
      <argument>false</argument>
      <argument type="service_closure" id="console.command.config_dump_reference"/>
    </service>
    <service id=".console.command.container_debug.lazy" class="Symfony\Component\Console\Command\LazyCommand">
      <argument>debug:container</argument>
      <argument type="collection"/>
      <argument>Display current services for an application</argument>
      <argument>false</argument>
      <argument type="service_closure" id="console.command.container_debug"/>
    </service>
    <service id=".console.command.container_lint.lazy" class="Symfony\Component\Console\Command\LazyCommand">
      <argument>lint:container</argument>
      <argument type="collection"/>
      <argument>Ensure that arguments injected into services match type declarations</argument>
      <argument>false</argument>
      <argument type="service_closure" id="console.command.container_lint"/>
    </service>
    <service id=".console.command.debug_autowiring.lazy" class="Symfony\Component\Console\Command\LazyCommand">
      <argument>debug:autowiring</argument>
      <argument type="collection"/>
      <argument>List classes/interfaces you can use for autowiring</argument>
      <argument>false</argument>
      <argument type="service_closure" id="console.command.debug_autowiring"/>
    </service>
    <service id=".console.command.dotenv_debug.lazy" class="Symfony\Component\Console\Command\LazyCommand">
      <argument>debug:dotenv</argument>
      <argument type="collection"/>
      <argument>List all dotenv files with variables and values</argument>
      <argument>false</argument>
      <argument type="service_closure" id="console.command.dotenv_debug"/>
    </service>
    <service id=".console.command.event_dispatcher_debug.lazy" class="Symfony\Component\Console\Command\LazyCommand">
      <argument>debug:event-dispatcher</argument>
      <argument type="collection"/>
      <argument>Display configured listeners for an application</argument>
      <argument>false</argument>
      <argument type="service_closure" id="console.command.event_dispatcher_debug"/>
    </service>
    <service id=".console.command.messenger_consume_messages.lazy" class="Symfony\Component\Console\Command\LazyCommand">
      <argument>messenger:consume</argument>
      <argument type="collection"/>
      <argument>Consume messages</argument>
      <argument>false</argument>
      <argument type="service_closure" id="console.command.messenger_consume_messages"/>
    </service>
    <service id=".console.command.messenger_setup_transports.lazy" class="Symfony\Component\Console\Command\LazyCommand">
      <argument>messenger:setup-transports</argument>
      <argument type="collection"/>
      <argument>Prepare the required infrastructure for the transport</argument>
      <argument>false</argument>
      <argument type="service_closure" id="console.command.messenger_setup_transports"/>
    </service>
    <service id=".console.command.messenger_debug.lazy" class="Symfony\Component\Console\Command\LazyCommand">
      <argument>debug:messenger</argument>
      <argument type="collection"/>
      <argument>List messages you can dispatch using the message buses</argument>
      <argument>false</argument>
      <argument type="service_closure" id="console.command.messenger_debug"/>
    </service>
    <service id=".console.command.messenger_stop_workers.lazy" class="Symfony\Component\Console\Command\LazyCommand">
      <argument>messenger:stop-workers</argument>
      <argument type="collection"/>
      <argument>Stop workers after their current message</argument>
      <argument>false</argument>
      <argument type="service_closure" id="console.command.messenger_stop_workers"/>
    </service>
    <service id=".console.command.messenger_stats.lazy" class="Symfony\Component\Console\Command\LazyCommand">
      <argument>messenger:stats</argument>
      <argument type="collection"/>
      <argument>Show the message count for one or more transports</argument>
      <argument>false</argument>
      <argument type="service_closure" id="console.command.messenger_stats"/>
    </service>
    <service id=".console.command.router_debug.lazy" class="Symfony\Component\Console\Command\LazyCommand">
      <argument>debug:router</argument>
      <argument type="collection"/>
      <argument>Display current routes for an application</argument>
      <argument>false</argument>
      <argument type="service_closure" id="console.command.router_debug"/>
    </service>
    <service id=".console.command.router_match.lazy" class="Symfony\Component\Console\Command\LazyCommand">
      <argument>router:match</argument>
      <argument type="collection"/>
      <argument>Help debug routes by simulating a path info match</argument>
      <argument>false</argument>
      <argument type="service_closure" id="console.command.router_match"/>
    </service>
    <service id=".console.command.yaml_lint.lazy" class="Symfony\Component\Console\Command\LazyCommand">
      <argument>lint:yaml</argument>
      <argument type="collection"/>
      <argument>Lint a YAML file and outputs encountered errors</argument>
      <argument>false</argument>
      <argument type="service_closure" id="console.command.yaml_lint"/>
    </service>
    <service id=".console.command.secrets_set.lazy" class="Symfony\Component\Console\Command\LazyCommand">
      <argument>secrets:set</argument>
      <argument type="collection"/>
      <argument>Set a secret in the vault</argument>
      <argument>false</argument>
      <argument type="service_closure" id="console.command.secrets_set"/>
    </service>
    <service id=".console.command.secrets_remove.lazy" class="Symfony\Component\Console\Command\LazyCommand">
      <argument>secrets:remove</argument>
      <argument type="collection"/>
      <argument>Remove a secret from the vault</argument>
      <argument>false</argument>
      <argument type="service_closure" id="console.command.secrets_remove"/>
    </service>
    <service id=".console.command.secrets_generate_key.lazy" class="Symfony\Component\Console\Command\LazyCommand">
      <argument>secrets:generate-keys</argument>
      <argument type="collection"/>
      <argument>Generate new encryption keys</argument>
      <argument>false</argument>
      <argument type="service_closure" id="console.command.secrets_generate_key"/>
    </service>
    <service id=".console.command.secrets_list.lazy" class="Symfony\Component\Console\Command\LazyCommand">
      <argument>secrets:list</argument>
      <argument type="collection"/>
      <argument>List all secrets</argument>
      <argument>false</argument>
      <argument type="service_closure" id="console.command.secrets_list"/>
    </service>
    <service id=".console.command.secrets_decrypt_to_local.lazy" class="Symfony\Component\Console\Command\LazyCommand">
      <argument>secrets:decrypt-to-local</argument>
      <argument type="collection"/>
      <argument>Decrypt all secrets and stores them in the local vault</argument>
      <argument>false</argument>
      <argument type="service_closure" id="console.command.secrets_decrypt_to_local"/>
    </service>
    <service id=".console.command.secrets_encrypt_from_local.lazy" class="Symfony\Component\Console\Command\LazyCommand">
      <argument>secrets:encrypt-from-local</argument>
      <argument type="collection"/>
      <argument>Encrypt all local secrets to the vault</argument>
      <argument>false</argument>
      <argument type="service_closure" id="console.command.secrets_encrypt_from_local"/>
    </service>
    <service id=".maker.auto_command.make_auth.lazy" class="Symfony\Component\Console\Command\LazyCommand">
      <argument>make:auth</argument>
      <argument type="collection"/>
      <argument>Create a Guard authenticator of different flavors</argument>
      <argument>false</argument>
      <argument type="service_closure" id="maker.auto_command.make_auth"/>
    </service>
    <service id=".maker.auto_command.make_command.lazy" class="Symfony\Component\Console\Command\LazyCommand">
      <argument>make:command</argument>
      <argument type="collection"/>
      <argument>Create a new console command class</argument>
      <argument>false</argument>
      <argument type="service_closure" id="maker.auto_command.make_command"/>
    </service>
    <service id=".maker.auto_command.make_twig_component.lazy" class="Symfony\Component\Console\Command\LazyCommand">
      <argument>make:twig-component</argument>
      <argument type="collection"/>
      <argument>Create a twig (or live) component</argument>
      <argument>false</argument>
      <argument type="service_closure" id="maker.auto_command.make_twig_component"/>
    </service>
    <service id=".maker.auto_command.make_controller.lazy" class="Symfony\Component\Console\Command\LazyCommand">
      <argument>make:controller</argument>
      <argument type="collection"/>
      <argument>Create a new controller class</argument>
      <argument>false</argument>
      <argument type="service_closure" id="maker.auto_command.make_controller"/>
    </service>
    <service id=".maker.auto_command.make_crud.lazy" class="Symfony\Component\Console\Command\LazyCommand">
      <argument>make:crud</argument>
      <argument type="collection"/>
      <argument>Create CRUD for Doctrine entity class</argument>
      <argument>false</argument>
      <argument type="service_closure" id="maker.auto_command.make_crud"/>
    </service>
    <service id=".maker.auto_command.make_docker_database.lazy" class="Symfony\Component\Console\Command\LazyCommand">
      <argument>make:docker:database</argument>
      <argument type="collection"/>
      <argument>Add a database container to your docker-compose.yaml file</argument>
      <argument>false</argument>
      <argument type="service_closure" id="maker.auto_command.make_docker_database"/>
    </service>
    <service id=".maker.auto_command.make_entity.lazy" class="Symfony\Component\Console\Command\LazyCommand">
      <argument>make:entity</argument>
      <argument type="collection"/>
      <argument>Create or update a Doctrine entity class, and optionally an API Platform resource</argument>
      <argument>false</argument>
      <argument type="service_closure" id="maker.auto_command.make_entity"/>
    </service>
    <service id=".maker.auto_command.make_fixtures.lazy" class="Symfony\Component\Console\Command\LazyCommand">
      <argument>make:fixtures</argument>
      <argument type="collection"/>
      <argument>Create a new class to load Doctrine fixtures</argument>
      <argument>false</argument>
      <argument type="service_closure" id="maker.auto_command.make_fixtures"/>
    </service>
    <service id=".maker.auto_command.make_form.lazy" class="Symfony\Component\Console\Command\LazyCommand">
      <argument>make:form</argument>
      <argument type="collection"/>
      <argument>Create a new form class</argument>
      <argument>false</argument>
      <argument type="service_closure" id="maker.auto_command.make_form"/>
    </service>
    <service id=".maker.auto_command.make_listener.lazy" class="Symfony\Component\Console\Command\LazyCommand">
      <argument>make:listener</argument>
      <argument type="collection">
        <argument>make:subscriber</argument>
      </argument>
      <argument>Creates a new event subscriber class or a new event listener class</argument>
      <argument>false</argument>
      <argument type="service_closure" id="maker.auto_command.make_listener"/>
    </service>
    <service id=".maker.auto_command.make_message.lazy" class="Symfony\Component\Console\Command\LazyCommand">
      <argument>make:message</argument>
      <argument type="collection"/>
      <argument>Create a new message and handler</argument>
      <argument>false</argument>
      <argument type="service_closure" id="maker.auto_command.make_message"/>
    </service>
    <service id=".maker.auto_command.make_messenger_middleware.lazy" class="Symfony\Component\Console\Command\LazyCommand">
      <argument>make:messenger-middleware</argument>
      <argument type="collection"/>
      <argument>Create a new messenger middleware</argument>
      <argument>false</argument>
      <argument type="service_closure" id="maker.auto_command.make_messenger_middleware"/>
    </service>
    <service id=".maker.auto_command.make_registration_form.lazy" class="Symfony\Component\Console\Command\LazyCommand">
      <argument>make:registration-form</argument>
      <argument type="collection"/>
      <argument>Create a new registration form system</argument>
      <argument>false</argument>
      <argument type="service_closure" id="maker.auto_command.make_registration_form"/>
    </service>
    <service id=".maker.auto_command.make_reset_password.lazy" class="Symfony\Component\Console\Command\LazyCommand">
      <argument>make:reset-password</argument>
      <argument type="collection"/>
      <argument>Create controller, entity, and repositories for use with symfonycasts/reset-password-bundle</argument>
      <argument>false</argument>
      <argument type="service_closure" id="maker.auto_command.make_reset_password"/>
    </service>
    <service id=".maker.auto_command.make_serializer_encoder.lazy" class="Symfony\Component\Console\Command\LazyCommand">
      <argument>make:serializer:encoder</argument>
      <argument type="collection"/>
      <argument>Create a new serializer encoder class</argument>
      <argument>false</argument>
      <argument type="service_closure" id="maker.auto_command.make_serializer_encoder"/>
    </service>
    <service id=".maker.auto_command.make_serializer_normalizer.lazy" class="Symfony\Component\Console\Command\LazyCommand">
      <argument>make:serializer:normalizer</argument>
      <argument type="collection"/>
      <argument>Create a new serializer normalizer class</argument>
      <argument>false</argument>
      <argument type="service_closure" id="maker.auto_command.make_serializer_normalizer"/>
    </service>
    <service id=".maker.auto_command.make_twig_extension.lazy" class="Symfony\Component\Console\Command\LazyCommand">
      <argument>make:twig-extension</argument>
      <argument type="collection"/>
      <argument>Create a new Twig extension with its runtime class</argument>
      <argument>false</argument>
      <argument type="service_closure" id="maker.auto_command.make_twig_extension"/>
    </service>
    <service id=".maker.auto_command.make_test.lazy" class="Symfony\Component\Console\Command\LazyCommand">
      <argument>make:test</argument>
      <argument type="collection">
        <argument>make:unit-test</argument>
        <argument>make:functional-test</argument>
      </argument>
      <argument>Create a new test class</argument>
      <argument>false</argument>
      <argument type="service_closure" id="maker.auto_command.make_test"/>
    </service>
    <service id=".maker.auto_command.make_validator.lazy" class="Symfony\Component\Console\Command\LazyCommand">
      <argument>make:validator</argument>
      <argument type="collection"/>
      <argument>Create a new validator and constraint class</argument>
      <argument>false</argument>
      <argument type="service_closure" id="maker.auto_command.make_validator"/>
    </service>
    <service id=".maker.auto_command.make_voter.lazy" class="Symfony\Component\Console\Command\LazyCommand">
      <argument>make:voter</argument>
      <argument type="collection"/>
      <argument>Create a new security voter class</argument>
      <argument>false</argument>
      <argument type="service_closure" id="maker.auto_command.make_voter"/>
    </service>
    <service id=".maker.auto_command.make_user.lazy" class="Symfony\Component\Console\Command\LazyCommand">
      <argument>make:user</argument>
      <argument type="collection"/>
      <argument>Create a new security user class</argument>
      <argument>false</argument>
      <argument type="service_closure" id="maker.auto_command.make_user"/>
    </service>
    <service id=".maker.auto_command.make_migration.lazy" class="Symfony\Component\Console\Command\LazyCommand">
      <argument>make:migration</argument>
      <argument type="collection"/>
      <argument>Create a new migration based on database changes</argument>
      <argument>false</argument>
      <argument type="service_closure" id="maker.auto_command.make_migration"/>
    </service>
    <service id=".maker.auto_command.make_stimulus_controller.lazy" class="Symfony\Component\Console\Command\LazyCommand">
      <argument>make:stimulus-controller</argument>
      <argument type="collection"/>
      <argument>Create a new Stimulus controller</argument>
      <argument>false</argument>
      <argument type="service_closure" id="maker.auto_command.make_stimulus_controller"/>
    </service>
    <service id=".maker.auto_command.make_security_form_login.lazy" class="Symfony\Component\Console\Command\LazyCommand">
      <argument>make:security:form-login</argument>
      <argument type="collection"/>
      <argument>Generate the code needed for the form_login authenticator</argument>
      <argument>false</argument>
      <argument type="service_closure" id="maker.auto_command.make_security_form_login"/>
    </service>
    <service id="console.command_loader" class="Symfony\Component\Console\CommandLoader\ContainerCommandLoader" public="true">
      <tag name="container.no_preload"/>
      <argument type="service" id=".service_locator.yOih5iU"/>
      <argument type="collection">
        <argument key="ecm:rabbitmq:configure">TyCode\Seller\Review\Infrastructure\Cli\RabbitMq\ConfigureRabbitMqCommand</argument>
        <argument key="ecm:rabbitmq:events:consume">TyCode\Seller\Review\Infrastructure\Cli\RabbitMq\ConsumeRabbitMqEventsCommand</argument>
        <argument key="ecm:rabbitmq:events:generate-supervisor-files">TyCode\Seller\Review\Infrastructure\Cli\RabbitMq\GenerateSupervisorRabbitMqConsumerFilesCommand</argument>
        <argument key="about">console.command.about</argument>
        <argument key="assets:install">console.command.assets_install</argument>
        <argument key="cache:clear">console.command.cache_clear</argument>
        <argument key="cache:pool:clear">console.command.cache_pool_clear</argument>
        <argument key="cache:pool:prune">console.command.cache_pool_prune</argument>
        <argument key="cache:pool:invalidate-tags">console.command.cache_pool_invalidate_tags</argument>
        <argument key="cache:pool:delete">console.command.cache_pool_delete</argument>
        <argument key="cache:pool:list">console.command.cache_pool_list</argument>
        <argument key="cache:warmup">console.command.cache_warmup</argument>
        <argument key="debug:config">console.command.config_debug</argument>
        <argument key="config:dump-reference">console.command.config_dump_reference</argument>
        <argument key="debug:container">console.command.container_debug</argument>
        <argument key="lint:container">console.command.container_lint</argument>
        <argument key="debug:autowiring">console.command.debug_autowiring</argument>
        <argument key="debug:dotenv">console.command.dotenv_debug</argument>
        <argument key="debug:event-dispatcher">console.command.event_dispatcher_debug</argument>
        <argument key="messenger:consume">console.command.messenger_consume_messages</argument>
        <argument key="messenger:setup-transports">console.command.messenger_setup_transports</argument>
        <argument key="debug:messenger">console.command.messenger_debug</argument>
        <argument key="messenger:stop-workers">console.command.messenger_stop_workers</argument>
        <argument key="messenger:stats">console.command.messenger_stats</argument>
        <argument key="debug:router">console.command.router_debug</argument>
        <argument key="router:match">console.command.router_match</argument>
        <argument key="lint:yaml">console.command.yaml_lint</argument>
        <argument key="secrets:set">console.command.secrets_set</argument>
        <argument key="secrets:remove">console.command.secrets_remove</argument>
        <argument key="secrets:generate-keys">console.command.secrets_generate_key</argument>
        <argument key="secrets:list">console.command.secrets_list</argument>
        <argument key="secrets:decrypt-to-local">console.command.secrets_decrypt_to_local</argument>
        <argument key="secrets:encrypt-from-local">console.command.secrets_encrypt_from_local</argument>
        <argument key="make:auth">maker.auto_command.make_auth</argument>
        <argument key="make:command">maker.auto_command.make_command</argument>
        <argument key="make:twig-component">maker.auto_command.make_twig_component</argument>
        <argument key="make:controller">maker.auto_command.make_controller</argument>
        <argument key="make:crud">maker.auto_command.make_crud</argument>
        <argument key="make:docker:database">maker.auto_command.make_docker_database</argument>
        <argument key="make:entity">maker.auto_command.make_entity</argument>
        <argument key="make:fixtures">maker.auto_command.make_fixtures</argument>
        <argument key="make:form">maker.auto_command.make_form</argument>
        <argument key="make:listener">maker.auto_command.make_listener</argument>
        <argument key="make:subscriber">maker.auto_command.make_listener</argument>
        <argument key="make:message">maker.auto_command.make_message</argument>
        <argument key="make:messenger-middleware">maker.auto_command.make_messenger_middleware</argument>
        <argument key="make:registration-form">maker.auto_command.make_registration_form</argument>
        <argument key="make:reset-password">maker.auto_command.make_reset_password</argument>
        <argument key="make:serializer:encoder">maker.auto_command.make_serializer_encoder</argument>
        <argument key="make:serializer:normalizer">maker.auto_command.make_serializer_normalizer</argument>
        <argument key="make:twig-extension">maker.auto_command.make_twig_extension</argument>
        <argument key="make:test">maker.auto_command.make_test</argument>
        <argument key="make:unit-test">maker.auto_command.make_test</argument>
        <argument key="make:functional-test">maker.auto_command.make_test</argument>
        <argument key="make:validator">maker.auto_command.make_validator</argument>
        <argument key="make:voter">maker.auto_command.make_voter</argument>
        <argument key="make:user">maker.auto_command.make_user</argument>
        <argument key="make:migration">maker.auto_command.make_migration</argument>
        <argument key="make:stimulus-controller">maker.auto_command.make_stimulus_controller</argument>
        <argument key="make:security:form-login">maker.auto_command.make_security_form_login</argument>
      </argument>
    </service>
    <service id=".service_locator.yOih5iU" class="Symfony\Component\DependencyInjection\ServiceLocator">
      <tag name="container.service_locator"/>
      <argument type="collection">
        <argument key="TyCode\Seller\Review\Infrastructure\Cli\RabbitMq\ConfigureRabbitMqCommand" type="service_closure" id="TyCode\Seller\Review\Infrastructure\Cli\RabbitMq\ConfigureRabbitMqCommand"/>
        <argument key="TyCode\Seller\Review\Infrastructure\Cli\RabbitMq\ConsumeRabbitMqEventsCommand" type="service_closure" id="TyCode\Seller\Review\Infrastructure\Cli\RabbitMq\ConsumeRabbitMqEventsCommand"/>
        <argument key="TyCode\Seller\Review\Infrastructure\Cli\RabbitMq\GenerateSupervisorRabbitMqConsumerFilesCommand" type="service_closure" id="TyCode\Seller\Review\Infrastructure\Cli\RabbitMq\GenerateSupervisorRabbitMqConsumerFilesCommand"/>
        <argument key="console.command.about" type="service_closure" id=".console.command.about.lazy"/>
        <argument key="console.command.assets_install" type="service_closure" id=".console.command.assets_install.lazy"/>
        <argument key="console.command.cache_clear" type="service_closure" id=".console.command.cache_clear.lazy"/>
        <argument key="console.command.cache_pool_clear" type="service_closure" id=".console.command.cache_pool_clear.lazy"/>
        <argument key="console.command.cache_pool_prune" type="service_closure" id=".console.command.cache_pool_prune.lazy"/>
        <argument key="console.command.cache_pool_invalidate_tags" type="service_closure" id=".console.command.cache_pool_invalidate_tags.lazy"/>
        <argument key="console.command.cache_pool_delete" type="service_closure" id=".console.command.cache_pool_delete.lazy"/>
        <argument key="console.command.cache_pool_list" type="service_closure" id=".console.command.cache_pool_list.lazy"/>
        <argument key="console.command.cache_warmup" type="service_closure" id=".console.command.cache_warmup.lazy"/>
        <argument key="console.command.config_debug" type="service_closure" id=".console.command.config_debug.lazy"/>
        <argument key="console.command.config_dump_reference" type="service_closure" id=".console.command.config_dump_reference.lazy"/>
        <argument key="console.command.container_debug" type="service_closure" id=".console.command.container_debug.lazy"/>
        <argument key="console.command.container_lint" type="service_closure" id=".console.command.container_lint.lazy"/>
        <argument key="console.command.debug_autowiring" type="service_closure" id=".console.command.debug_autowiring.lazy"/>
        <argument key="console.command.dotenv_debug" type="service_closure" id=".console.command.dotenv_debug.lazy"/>
        <argument key="console.command.event_dispatcher_debug" type="service_closure" id=".console.command.event_dispatcher_debug.lazy"/>
        <argument key="console.command.messenger_consume_messages" type="service_closure" id=".console.command.messenger_consume_messages.lazy"/>
        <argument key="console.command.messenger_setup_transports" type="service_closure" id=".console.command.messenger_setup_transports.lazy"/>
        <argument key="console.command.messenger_debug" type="service_closure" id=".console.command.messenger_debug.lazy"/>
        <argument key="console.command.messenger_stop_workers" type="service_closure" id=".console.command.messenger_stop_workers.lazy"/>
        <argument key="console.command.messenger_stats" type="service_closure" id=".console.command.messenger_stats.lazy"/>
        <argument key="console.command.router_debug" type="service_closure" id=".console.command.router_debug.lazy"/>
        <argument key="console.command.router_match" type="service_closure" id=".console.command.router_match.lazy"/>
        <argument key="console.command.yaml_lint" type="service_closure" id=".console.command.yaml_lint.lazy"/>
        <argument key="console.command.secrets_set" type="service_closure" id=".console.command.secrets_set.lazy"/>
        <argument key="console.command.secrets_remove" type="service_closure" id=".console.command.secrets_remove.lazy"/>
        <argument key="console.command.secrets_generate_key" type="service_closure" id=".console.command.secrets_generate_key.lazy"/>
        <argument key="console.command.secrets_list" type="service_closure" id=".console.command.secrets_list.lazy"/>
        <argument key="console.command.secrets_decrypt_to_local" type="service_closure" id=".console.command.secrets_decrypt_to_local.lazy"/>
        <argument key="console.command.secrets_encrypt_from_local" type="service_closure" id=".console.command.secrets_encrypt_from_local.lazy"/>
        <argument key="maker.auto_command.make_auth" type="service_closure" id=".maker.auto_command.make_auth.lazy"/>
        <argument key="maker.auto_command.make_command" type="service_closure" id=".maker.auto_command.make_command.lazy"/>
        <argument key="maker.auto_command.make_twig_component" type="service_closure" id=".maker.auto_command.make_twig_component.lazy"/>
        <argument key="maker.auto_command.make_controller" type="service_closure" id=".maker.auto_command.make_controller.lazy"/>
        <argument key="maker.auto_command.make_crud" type="service_closure" id=".maker.auto_command.make_crud.lazy"/>
        <argument key="maker.auto_command.make_docker_database" type="service_closure" id=".maker.auto_command.make_docker_database.lazy"/>
        <argument key="maker.auto_command.make_entity" type="service_closure" id=".maker.auto_command.make_entity.lazy"/>
        <argument key="maker.auto_command.make_fixtures" type="service_closure" id=".maker.auto_command.make_fixtures.lazy"/>
        <argument key="maker.auto_command.make_form" type="service_closure" id=".maker.auto_command.make_form.lazy"/>
        <argument key="maker.auto_command.make_listener" type="service_closure" id=".maker.auto_command.make_listener.lazy"/>
        <argument key="maker.auto_command.make_message" type="service_closure" id=".maker.auto_command.make_message.lazy"/>
        <argument key="maker.auto_command.make_messenger_middleware" type="service_closure" id=".maker.auto_command.make_messenger_middleware.lazy"/>
        <argument key="maker.auto_command.make_registration_form" type="service_closure" id=".maker.auto_command.make_registration_form.lazy"/>
        <argument key="maker.auto_command.make_reset_password" type="service_closure" id=".maker.auto_command.make_reset_password.lazy"/>
        <argument key="maker.auto_command.make_serializer_encoder" type="service_closure" id=".maker.auto_command.make_serializer_encoder.lazy"/>
        <argument key="maker.auto_command.make_serializer_normalizer" type="service_closure" id=".maker.auto_command.make_serializer_normalizer.lazy"/>
        <argument key="maker.auto_command.make_twig_extension" type="service_closure" id=".maker.auto_command.make_twig_extension.lazy"/>
        <argument key="maker.auto_command.make_test" type="service_closure" id=".maker.auto_command.make_test.lazy"/>
        <argument key="maker.auto_command.make_validator" type="service_closure" id=".maker.auto_command.make_validator.lazy"/>
        <argument key="maker.auto_command.make_voter" type="service_closure" id=".maker.auto_command.make_voter.lazy"/>
        <argument key="maker.auto_command.make_user" type="service_closure" id=".maker.auto_command.make_user.lazy"/>
        <argument key="maker.auto_command.make_migration" type="service_closure" id=".maker.auto_command.make_migration.lazy"/>
        <argument key="maker.auto_command.make_stimulus_controller" type="service_closure" id=".maker.auto_command.make_stimulus_controller.lazy"/>
        <argument key="maker.auto_command.make_security_form_login" type="service_closure" id=".maker.auto_command.make_security_form_login.lazy"/>
      </argument>
    </service>
    <service id="TyCode\SellerProduct\Domain\ProductRepository" alias="TyCode\Seller\Product\Infrastructure\Persistence\DoctrineProductRepository"/>
    <service id="TyCode\Shared\Domain\Bus\Command\CommandBus" alias="TyCode\Shared\Infrastructure\Bus\Command\SymfonyMessageCommandBus"/>
    <service id="TyCode\Shared\Domain\Bus\Query\QueryBus" alias="TyCode\Shared\Infrastructure\Bus\Query\SymfonyMessageQueryBus"/>
    <service id="TyCode\Shared\Domain\Bus\Event\EventBus" alias="TyCode\Shared\Infrastructure\Bus\Event\RabbitMq\RabbitMqEventBus"/>
    <service id="TyCode\Seller\Product\Domain\ProductRepository" alias="TyCode\Seller\Product\Infrastructure\Persistence\DoctrineProductRepository"/>
    <service id="Symfony\Component\DependencyInjection\ParameterBag\ContainerBagInterface" alias="parameter_bag"/>
    <service id="Symfony\Component\DependencyInjection\ParameterBag\ParameterBagInterface" alias="parameter_bag"/>
    <service id="Symfony\Component\EventDispatcher\EventDispatcherInterface" alias="debug.event_dispatcher"/>
    <service id="Symfony\Contracts\EventDispatcher\EventDispatcherInterface" alias="debug.event_dispatcher"/>
    <service id="Psr\EventDispatcher\EventDispatcherInterface" alias="debug.event_dispatcher"/>
    <service id="Symfony\Component\HttpKernel\HttpKernelInterface" alias="http_kernel"/>
    <service id="Symfony\Component\HttpFoundation\RequestStack" alias="request_stack"/>
    <service id="Symfony\Component\HttpKernel\HttpCache\StoreInterface" alias="http_cache.store"/>
    <service id="Symfony\Component\HttpFoundation\UrlHelper" alias="url_helper"/>
    <service id="Symfony\Component\HttpKernel\KernelInterface" alias="kernel"/>
    <service id="Symfony\Component\Filesystem\Filesystem" alias="filesystem"/>
    <service id="Symfony\Component\HttpKernel\Config\FileLocator" alias="file_locator"/>
    <service id="Symfony\Component\HttpFoundation\UriSigner" alias="uri_signer"/>
    <service id="Symfony\Component\HttpKernel\UriSigner" alias="uri_signer">
      <deprecated package="symfony/framework-bundle" version="6.4">The "%alias_id%" alias is deprecated, use "Symfony\Component\HttpFoundation\UriSigner" instead.</deprecated>
    </service>
    <service id="Symfony\Component\DependencyInjection\ReverseContainer" alias="reverse_container"/>
    <service id="Symfony\Component\String\Slugger\SluggerInterface" alias="slugger"/>
    <service id="Symfony\Component\Clock\ClockInterface" alias="clock"/>
    <service id="Psr\Clock\ClockInterface" alias="clock"/>
    <service id="Symfony\Component\HttpKernel\Fragment\FragmentUriGeneratorInterface" alias="fragment.uri_generator"/>
    <service id="error_renderer.html" alias="error_handler.error_renderer.html"/>
    <service id="error_renderer" alias="error_handler.error_renderer.html"/>
    <service id=".Psr\Container\ContainerInterface $parameter_bag" alias="parameter_bag"/>
    <service id="Psr\Container\ContainerInterface $parameterBag" alias="parameter_bag"/>
    <service id="cache.app_clearer" alias="cache.default_clearer" public="true"/>
    <service id="Psr\Cache\CacheItemPoolInterface" alias="cache.app"/>
    <service id="Symfony\Contracts\Cache\CacheInterface" alias="cache.app"/>
    <service id="Symfony\Contracts\Cache\TagAwareCacheInterface" alias="cache.app.taggable"/>
    <service id="Symfony\Component\ErrorHandler\ErrorRenderer\FileLinkFormatter" alias="debug.file_link_formatter"/>
    <service id="Symfony\Component\Stopwatch\Stopwatch" alias="debug.stopwatch"/>
    <service id="routing.loader.annotation" alias="routing.loader.attribute">
      <deprecated package="symfony/routing" version="6.4">The "%alias_id%" service is deprecated, use the "routing.loader.attribute" service instead.</deprecated>
    </service>
    <service id="routing.loader.annotation.directory" alias="routing.loader.attribute.directory">
      <deprecated package="symfony/routing" version="6.4">The "%alias_id%" service is deprecated, use the "routing.loader.attribute.directory" service instead.</deprecated>
    </service>
    <service id="routing.loader.annotation.file" alias="routing.loader.attribute.file">
      <deprecated package="symfony/routing" version="6.4">The "%alias_id%" service is deprecated, use the "routing.loader.attribute.file" service instead.</deprecated>
    </service>
    <service id="router" alias="router.default" public="true"/>
    <service id="Symfony\Component\Routing\RouterInterface" alias="router.default"/>
    <service id="Symfony\Component\Routing\Generator\UrlGeneratorInterface" alias="router.default"/>
    <service id="Symfony\Component\Routing\Matcher\UrlMatcherInterface" alias="router.default"/>
    <service id="Symfony\Component\Routing\RequestContextAwareInterface" alias="router.default"/>
    <service id="Symfony\Component\Routing\RequestContext" alias="router.request_context"/>
    <service id="cache.default_redis_provider" alias=".cache_connection.GD_MSZC"/>
    <service id="cache.default_memcached_provider" alias=".cache_connection.JKE6keX"/>
    <service id="cache.default_doctrine_dbal_provider" alias="database_connection"/>
    <service id="SessionHandlerInterface" alias="session.handler.native"/>
    <service id="session.storage.factory" alias="session.storage.factory.native"/>
    <service id="session.handler" alias="session.handler.native"/>
    <service id="messenger.default_serializer" alias="messenger.transport.native_php_serializer"/>
    <service id="messenger.listener.stop_worker_on_sigterm_signal_listener" alias="messenger.listener.stop_worker_signals_listener">
      <deprecated package="6.3" version="symfony/messenger">The "%alias_id%" service is deprecated, use the "Symfony\Component\Console\Command\SignalableCommandInterface" instead.</deprecated>
    </service>
    <service id="messenger.default_bus" alias="messenger.bus.default" public="true"/>
    <service id="Symfony\Component\Messenger\MessageBusInterface" alias="messenger.bus.default"/>
    <service id="container.env_var_processors_locator" alias=".service_locator.w7.f4fT" public="true"/>
    <service id="argument_resolver.controller_locator" alias=".service_locator.Zbeqssn"/>
    <service id="Psr\Log\LoggerInterface" alias="logger"/>
    <service id=".service_locator.Xbsa8iG" alias="messenger.retry_strategy_locator"/>
    <service id=".service_locator.bJ.4HC5" alias=".service_locator.w7.f4fT"/>
    <service id=".service_locator.lcHHbN8" alias=".service_locator.Zbeqssn"/>
    <service id="event_dispatcher" alias="debug.event_dispatcher" public="true"/>
    <service id="controller_resolver" alias="debug.controller_resolver"/>
    <service id="argument_resolver" alias="debug.argument_resolver"/>
    <service id=".service_locator.gFlme_s" alias=".service_locator.y4_Zrx."/>
    <service id=".service_locator.WmuW8oO" alias=".service_locator.EgMTexf"/>
    <service id=".service_locator.8KMcB9P" alias=".service_locator.lwNoDbx"/>
    <service id=".service_locator.jyh.CQG" alias=".service_locator.M1u7FKz"/>
    <service id=".service_locator.u6DWx23" alias=".service_locator.cXsfP3P"/>
  </services>
</container>
